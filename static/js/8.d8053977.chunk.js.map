{"version":3,"sources":["components/layout/Flex.tsx","hooks/usePersistState.ts","utils/latinise.ts","components/PageHeader/PageHeader.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/DualFarms/components/types.ts","views/DualFarms/components/FarmCard/DetailsSection.tsx","views/DualFarms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/ModalActions/ModalActions.tsx","views/DualFarms/components/DepositModal.tsx","views/DualFarms/components/WithdrawModal.tsx","views/DualFarms/components/FarmCard/StakeAction.tsx","views/DualFarms/components/FarmCard/HarvestAction.tsx","hooks/useHarvest.ts","views/DualFarms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/DualFarms/components/FarmCard/FarmCard.tsx","views/DualFarms/Farms.tsx","utils/callHelpers.ts","components/UnlockButton.tsx","components/ModalInput/ModalInput.tsx","components/Spacer/Spacer.tsx"],"names":["FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Latinise","latin_map","τ","Τ","latinise","input","replace","x","Outer","Box","theme","background","colors","gradients","bubblegum","isImage","Inner","Container","PageHeader","children","props","Wrapper","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","StyledLinkExternal","LinkExternal","DetailsSection","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","Flex","CardHeading","Tag","tokenSymbol","isCommunityFarm","farmImages","farm","alignItems","mb","width","src","icon","alt","height","icon2","flexDirection","trim","useStake","pid","master","dispatch","useAppDispatch","useWeb3React","account","chainId","web3","useWeb3","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledModalActions","primaryDark","spacing","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","Spacer","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","handleSelectMax","title","ModalInput","onSelectMax","onChange","symbol","inputTitle","variant","disabled","isFinite","eq","gt","style","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","reserves0","reserves1","totalSupply","token2Symbol","displayBalance","stakedBalanceNumber","getBalanceNumber","toLocaleString","calculatedAmount1","multipliedBy","getBalanceAmount","dividedBy","toNumber","toFixed","calculatedAmount2","useModal","onPresentDeposit","onPresentWithdraw","fontSize","some","item","pathname","includes","mr","HarvestAction","earnings","token","earningsLua","onReward","farmPid","harvest","useHarvest","rawEarningsBalance","rawEarningsBalanceLua","displayBalanceLua","Action","CardActions","requestedApproval","setRequestedApproval","library","lpAddresses","quoteToken","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","earningsLuaAsString","lpAddress","getAddress","lpName","lpTokenName","toUpperCase","isApproved","isGreaterThan","eProvider","onApprove","lpContract","approve","tx","useApprove","getERC20Contract","handleApprove","textTransform","pr","mt","UnlockButton","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","isPromotedFarm","radii","card","Divider","cardBorder","ExpandingWrapper","FarmCard","luaPrice","ID","IsTomoChain","showExpandableSection","setShowExpandableSection","newReward","reward","lpSymbol","split","usdValue","parseFloat","addLiquidityLink","pairLink","multiplier","isCommunity","luaReward","apy","CardActionsContainer","PoolContainer","PageLoader","mediaQueries","sm","Text","Farms","Image","useRouteMatch","path","useFarms","farmsLP","data","userDataLoaded","isLoading","setIsLoading","useLuaPrice","query","TABLE","useHistory","setDefaultFarmData","fetchFarms","id","setInterval","clearInterval","farmsLpMemoized","lowercaseQuery","toLowerCase","filter","process","as","scale","gasLimit","from","methods","options","address","ethers","constants","MaxUint256","send","res","deposit","times","DEFAULT_TOKEN_DECIMAL","toString","on","transactionHash","depositIdo","luaIdoContract","idoIndex","isNativeToken","proofS","commit","claimRewardIdo","userClaim","claimVesting","vestingContract","claim","approveIdo","tokenContract","luaIdoAddress","withdraw","claimReward","useAuth","login","logout","onPresentConnectModal","useWalletModal","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","xs","StyledErrorMessage","min","isLoadingDataFromContract","secondaryTitle","showWarning","isBalanceZero","position","pl","pattern","inputMode","step","placeholder","external","StyledSpacer","size","s","useContext","ThemeContext"],"mappings":"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","file":"static/js/8.d8053977.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from 'luastarter-uikits'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string; isImage?: boolean }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n  ${({ isImage }) => (isImage ? 'background-size: cover;background-repeat: no-repeat;' : '')}\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string; isImage?: boolean }> = ({\r\n  background,\r\n  isImage,\r\n  children,\r\n  ...props\r\n}) => (\r\n  <Outer background={background} isImage={isImage} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'luastarter-uikits'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  // {\r\n  //   id: 5,\r\n  //   name: 'multiplier',\r\n  //   sortable: true,\r\n  //   label: 'Multiplier',\r\n  // },\r\n  {\r\n    id: 5,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from 'luastarter-uikits'\r\n\r\nexport interface ExpandableSectionProps {\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      <StyledLinkExternal href={addLiquidityUrl}>Add liquidity {lpLabel}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from 'luastarter-uikits'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImages?: string[]\r\n  tokenSymbol?: string\r\n  farm?: any\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, isCommunityFarm, farmImages, tokenSymbol, farm }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Wrapper justifyContent=\"left\" alignItems=\"center\" width=\"130px\">\r\n        <Image src={farm.icon} alt={tokenSymbol} width={64} height={64} />\r\n        <Image src={farm.icon2} alt={tokenSymbol} width={64} height={64} />\r\n      </Wrapper>\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.replace('LUA-V1 LP', '').trim()}</Heading>\r\n        <Flex justifyContent=\"center\">{/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}</Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { stake } from 'utils/callHelpers'\r\nimport { useMasterchef } from './useContract'\r\n\r\nconst useStake = (pid: number, master?: string) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const masterChefContract = useMasterchef(chainId, master)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account, chainId)\r\n      dispatch(fetchFarmUserDataAsync(account, chainId, web3))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, chainId, web3],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { unstake } from 'utils/callHelpers'\r\nimport { useMasterchef } from './useContract'\r\n\r\nconst useUnstake = (pid: number, master?: string) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const masterChefContract = useMasterchef(chainId, master)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account, chainId)\r\n      dispatch(fetchFarmUserDataAsync(account, chainId, web3))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, chainId, web3],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from 'luastarter-uikits'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from 'luastarter-uikits'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal, Text } from 'luastarter-uikits'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  reserves0?: string\r\n  reserves1?: string\r\n  totalSupply?: string\r\n}\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  master?: string\r\n  farm: FarmWithStakedValue\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  farm,\r\n  master,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid, master)\r\n  const { onUnstake } = useUnstake(pid, master)\r\n  const location = useLocation()\r\n  const { reserves0, reserves1, totalSupply, token2Symbol, tokenSymbol } = farm\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const calculatedAmount1 = useMemo(() => {\r\n    return new BigNumber(reserves0)\r\n      .multipliedBy(getBalanceAmount(stakedBalance))\r\n      .dividedBy(totalSupply)\r\n      .toNumber()\r\n      .toFixed(2)\r\n  }, [displayBalance])\r\n\r\n  const calculatedAmount2 = useMemo(() => {\r\n    return new BigNumber(reserves1)\r\n      .multipliedBy(getBalanceAmount(stakedBalance))\r\n      .dividedBy(totalSupply)\r\n      .toNumber()\r\n      .toFixed(2)\r\n  }, [displayBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n  // (${calculatedAmount1} ${tokenSymbol?.symbol} + ${calculatedAmount2} ${\r\n  //   token2Symbol?.symbol\r\n  // })\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>\r\n        {stakedBalance.eq(0) ? (\r\n          '0'\r\n        ) : (\r\n          <span>\r\n            {displayBalance()}\r\n            <span\r\n              style={{\r\n                fontSize: '15px',\r\n              }}\r\n            >\r\n              &nbsp;({calculatedAmount1} {tokenSymbol?.symbol} + {calculatedAmount2} {token2Symbol?.symbol})\r\n            </span>\r\n          </span>\r\n        )}\r\n      </Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from 'luastarter-uikits'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  earningsLua?: BigNumber\r\n  token?: string\r\n  pid?: number\r\n  master?: string\r\n}\r\n\r\n// TODO: Change value of the cakePrice here\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, token, earningsLua, pid, master }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid, master)\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const rawEarningsBalanceLua = account ? getBalanceNumber(earningsLua) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const displayBalanceLua = rawEarningsBalanceLua.toLocaleString()\r\n\r\n  // const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance} {token}\r\n        {/* {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />} */}\r\n      </Heading>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalanceLua} LUA\r\n        {/* {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />} */}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { harvest } from 'utils/callHelpers'\r\nimport { useMasterchef } from './useContract'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const useHarvest = (farmPid: number, master?: string) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const masterChefContract = useMasterchef(chainId, master)\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account, chainId)\r\n    dispatch(fetchFarmUserDataAsync(account, chainId, web3))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, chainId, web3])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getERC20Contract } from 'utils/contractHelpers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text } from 'luastarter-uikits'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  reserves0?: string\r\n  reserves1?: string\r\n  totalSupply?: string\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { library, chainId } = useWeb3React()\r\n  const { pid, lpAddresses, master, quoteToken, reserves0, reserves1, totalSupply } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n    earningsLua: earningsLuaAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const earningsLua = new BigNumber(earningsLuaAsString)\r\n  const lpAddress = getAddress(lpAddresses, chainId)\r\n  const lpName = farm.lpTokenName?.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  // @ts-ignore\r\n  const eProvider = library || null\r\n  const lpContract = getERC20Contract(eProvider, lpAddress, chainId)\r\n  const { onApprove } = useApprove(lpContract, master)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        farm={farm}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        master={master}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"#FABC46\" fontSize=\"12px\" pr=\"3px\">\r\n          {quoteToken.symbol} & LUA\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"#c3c3c3\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction\r\n        earnings={earnings}\r\n        pid={pid}\r\n        master={master}\r\n        token={quoteToken.symbol}\r\n        earningsLua={earningsLua}\r\n      />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"#FABC46\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"#c3c3c3\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef } from './useContract'\r\n\r\n// Approve a Farm\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const useApprove = (lpContract: Contract, master?: string) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const masterChefContract = useMasterchef(chainId, master)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account, chainId)\r\n      dispatch(fetchFarmUserDataAsync(account, chainId, web3))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, chainId, web3])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from 'luastarter-uikits'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, NUMBER_BLOCKS_PER_YEAR } from 'config'\r\nimport { IsTomoChain } from 'utils/wallet'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  reserves0?: string\r\n  reserves1?: string\r\n  totalSupply?: string\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: #282828;\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n  luaPrice?: BigNumber\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, account, luaPrice }) => {\r\n  const { t } = useTranslation()\r\n  const { chainId } = useWeb3React()\r\n  const ID = chainId === 88 ? 88 : 1\r\n  const isTomo = IsTomoChain(ID)\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  // const newReward = useNewRewards(farm.pid + 1)\r\n  const newReward = farm.reward ? new BigNumber(farm.reward) : new BigNumber(0)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImages = farm.lpSymbol.split('-')\r\n\r\n  const totalValueFormatted = farm.usdValue ? `$${parseFloat(farm.usdValue.toFixed(0)).toLocaleString('en-US')}` : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = 'LUA'\r\n\r\n  // const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const addLiquidityUrl = farm.addLiquidityLink\r\n  const { pairLink } = farm\r\n  const lpAddress = farm.lpAddresses[chainId]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  if (!farm.master) {\r\n    return <div>Missing master address in this pool</div>\r\n  }\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        farm={farm}\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImages={farmImages}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      <>\r\n        {/* <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {newReward && farm && luaPrice && farm.usdValue && farm.totalToken2Value && farm.poolWeight ? (\r\n              <>\r\n                {parseFloat(\r\n                  luaPrice\r\n                    .times(NUMBER_BLOCKS_PER_YEAR[ID])\r\n                    .times(newReward.div(10 ** 18))\r\n                    .div(farm.usdValue)\r\n                    .div(10 ** 8)\r\n                    .times(100)\r\n                    .toFixed(2),\r\n                ).toLocaleString('en-US')}\r\n                %\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex> */}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Reward')}:</Text>\r\n          <Text bold>\r\n            {getBalanceNumber(newReward).toFixed(2)} {farm.quoteToken.symbol}\r\n            &nbsp;+&nbsp;\r\n            {getBalanceNumber(new BigNumber(farm.luaReward || '0')).toFixed(2)} LUA / block\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>APY:</Text>\r\n          <Text bold>{farm.apy} %</Text>\r\n        </Flex>\r\n      </>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex> */}\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          infoAddress={pairLink}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useHistory } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { useSelector } from 'react-redux'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Text, Mesage, Spinner } from 'luastarter-uikits'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms } from 'state/hooks'\r\nimport useLuaPrice from 'hooks/useLuaPrice'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NUMBER_BLOCKS_PER_YEAR } from 'config'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { IsTomoChain } from 'utils/wallet'\r\nimport { latinise } from 'utils/latinise'\r\nimport { fetchFarms, fetchFarmUserDataAsync, setDefaultFarmData } from 'state/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport FarmCard from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst PoolContainer = styled.div`\r\n  padding: 48px 24px;\r\n`\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\nconst PageLoader = styled.div`\r\n  height: calc(100vh - 312px);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const luaPrice = useLuaPrice()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const dispatch = useAppDispatch()\r\n  const ID = 88 // chainId === 88 ? 88 : 1\r\n  const history = useHistory()\r\n  useEffect(() => {\r\n    dispatch(setDefaultFarmData(chainId))\r\n    dispatch(\r\n      fetchFarms(chainId, web3, true, () => {\r\n        setIsLoading(false)\r\n      }),\r\n    )\r\n  }, [account, dispatch, chainId, web3])\r\n\r\n  useEffect(() => {\r\n    let id\r\n    if (account && farmsLP.length > 0 && farmsLP[0].master) {\r\n      id = setInterval(() => {\r\n        dispatch(fetchFarmUserDataAsync(account, chainId, web3, farmsLP))\r\n      }, 2000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(id)\r\n    }\r\n  }, [account, farmsLP.length, chainId, web3, dispatch])\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const farmsLpMemoized = useMemo(() => {\r\n    if (query) {\r\n      const lowercaseQuery = latinise(query.toLowerCase())\r\n      return farmsLP.filter((farm) => {\r\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n      })\r\n    }\r\n    return farmsLP\r\n  }, [query, farmsLP])\r\n\r\n  const rowData = []\r\n  /*\r\n  farmsLpMemoized.map((farm) => {\r\n    console.log(farm)\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n    const reward = farm.reward ? new BigNumber(farm.reward) : new BigNumber(0)\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: '1', // have to fill correct value\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        luaPrice,\r\n        originalValue: parseFloat(\r\n          luaPrice\r\n            .times(NUMBER_BLOCKS_PER_YEAR[ID])\r\n            .times(reward.div(10 ** 18))\r\n            .div(farm.usdValue)\r\n            .div(10 ** 8)\r\n            .times(100)\r\n            .toFixed(2),\r\n        ).toLocaleString('en-US'), // have to fill correct value\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.usdValue, // have to fill correct value\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n  */\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        {!isLoading ? (\r\n          <FlexLayout>\r\n            {farmsLpMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={`${farm.master}${farm.pid}`}\r\n                farm={farm}\r\n                account={account}\r\n                removed={false}\r\n                luaPrice={luaPrice}\r\n              />\r\n            ))}\r\n          </FlexLayout>\r\n        ) : (\r\n          <PageLoader>\r\n            <Spinner />\r\n          </PageLoader>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n  const isImage = true\r\n  return (\r\n    <>\r\n      <PageHeader background={`url(${process.env.PUBLIC_URL}/images/farm-bg.png)`} isImage={isImage}>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"#FFFFFF\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          Stake your LP tokens and earn token rewards\r\n        </Heading>\r\n      </PageHeader>\r\n      <PoolContainer>\r\n        {chainId !== 88 && !isLoading && (\r\n          <Mesage variant=\"warning\">\r\n            <Text>Please switch to Tomo Mainnet to use this feature</Text>\r\n          </Mesage>\r\n        )}\r\n        {/* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer> */}\r\n        {renderContent()}\r\n      </PoolContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account, chainId?) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  const res = await lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send(gasLimit)\r\n  return res\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, chainId?) => {\r\n  // if (pid === 0) {\r\n  //   return masterChefContract.methods\r\n  //     .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n  //     .send({ from: account, gas: DEFAULT_GAS })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const depositIdo = async (luaIdoContract, account, amount, idoIndex, isNativeToken, proofS) => {\r\n  // If pay token is native token, we will send amount or else we wont'\r\n  return luaIdoContract.methods\r\n    .commit(idoIndex, amount, proofS)\r\n    .send({\r\n      from: account,\r\n      ...(isNativeToken && { value: amount }),\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claimRewardIdo = async (luaIdoContract, account, amount, idoIndex, proofS) => {\r\n  // const commitedAmount = await luaIdoContract.methods.userCommitedAmount(account, 0).call()\r\n  return luaIdoContract.methods\r\n    .userClaim(idoIndex, account, amount, proofS)\r\n    .send({\r\n      from: account,\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claimVesting = async (vestingContract, account) => {\r\n  return vestingContract.methods\r\n    .claim()\r\n    .send({\r\n      from: account,\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const approveIdo = async (tokenContract, luaIdoAddress, account, chainId) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  const res = await tokenContract.methods.approve(luaIdoAddress, ethers.constants.MaxUint256).send(gasLimit)\r\n  return res\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account, chainId?) => {\r\n  // if (pid === 0) {\r\n  //   return masterChefContract.methods\r\n  //     .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n  //     .send({ from: account, gas: DEFAULT_GAS })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account, chainId) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .claimReward(pid)\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from 'luastarter-uikits'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button width=\"100%\" onClick={onPresentConnectModal} {...props}>\r\n      {t('Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link, Box } from 'luastarter-uikits'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  min?: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  secondaryTitle?: string\r\n  isLoadingDataFromContract?: boolean\r\n  showWarning?: boolean\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1a1a1a;\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  min,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  isLoadingDataFromContract = false,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  secondaryTitle = 'Balance',\r\n  showWarning = true,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero && showWarning}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{`${secondaryTitle}: ${isLoadingDataFromContract ? '~' : max}`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-between\">\r\n          <Box>\r\n            <StyledInput\r\n              pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n              inputMode=\"decimal\"\r\n              step=\"any\"\r\n              min={min}\r\n              max={max}\r\n              onChange={onChange}\r\n              placeholder=\"0\"\r\n              value={value}\r\n            />\r\n          </Box>\r\n          <Flex alignItems=\"center\">\r\n            <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\" disabled={isLoadingDataFromContract}>\r\n              {t('Max')}\r\n            </Button>\r\n            <Text>{symbol}</Text>\r\n          </Flex>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && addLiquidityUrl && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n"],"sourceRoot":""}