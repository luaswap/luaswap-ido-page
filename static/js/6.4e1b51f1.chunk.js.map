{"version":3,"sources":["hooks/AuthRoute.tsx","hooks/TOSAuthRoute.tsx","views/Idos/components/Hero.tsx","hooks/useDeepMemo.ts","views/Idos/utils/getMediaUrl.ts","utils/formatPoolData.ts","utils/formatTime.ts","views/Idos/hooks/useGetTimeOfPool.ts","views/Idos/hooks/useInterval.ts","views/Idos/hooks/useSecondsUntilCurrent.ts","views/Idos/hooks/usePoolStatus.ts","views/Idos/components/PoolDetail/index.tsx","views/Idos/components/IdoLayout.tsx","views/Idos/components/PageLoading.tsx","views/Idos/components/ProjectDetail/Steps.tsx","views/Idos/components/CurrentIdo.tsx","views/Idos/components/PastIdo.tsx","views/Idos/IdosInfo.tsx","views/Idos/components/DevTools/CreateForm.tsx","state/ido/fetchIdosData.tsx","views/Idos/components/DevTools/ReadForm.tsx","views/Idos/components/DevTools/ApproveToken.tsx","views/Idos/components/DevTools/IncreaseCap.tsx","views/Idos/DevTools.tsx","views/Idos/hooks/useGetTitleOfTier.ts","hooks/useDepositIdo.ts","hooks/useRefresh.ts","hooks/useTokenBalance.ts","hooks/useTimer.ts","hooks/useClaimVesting.tsx","views/Idos/hooks/useVestingInfo.ts","views/Idos/utils/generateClaimInfo.ts","hooks/useClaimRewardIdo.ts","utils/getTimePeriods.ts","views/Idos/components/ProjectDetail/CommitButton.tsx","views/Idos/components/ProjectDetail/ClaimButton.tsx","views/Idos/components/ProjectDetail/VestingButton.tsx","views/Idos/components/ProjectDetail/ActionButton.tsx","views/Idos/hooks/useIsApproved.ts","views/Idos/components/helper.ts","views/Idos/components/Timer.tsx","views/Idos/components/ProjectDetail/CountDown.tsx","views/Idos/components/ProjectDetail/Deposit.tsx","hooks/useApproveIdo.ts","views/Idos/hooks/useTotalDataFromAllPools.ts","views/Idos/components/ProjectDetail/PoolDateStatus.tsx","views/Idos/components/ProjectDetail/PoolSummary.tsx","views/Idos/components/ProjectDetail/ProjectInfo.tsx","views/Idos/components/ProjectDetail/PoolInfo.tsx","views/Idos/components/ProjectDetail/TokenInfo.tsx","views/Idos/components/ExpandableButton.tsx","views/Idos/components/ProjectDetail/TierDetails.tsx","utils/makeBatchRequest.ts","views/Idos/hooks/useDataFromIdoContract.ts","views/Idos/hooks/useTotalDataFromApi.ts","views/Idos/components/ProjectDetail/index.tsx","views/Idos/Idos.tsx","utils/callHelpers.ts","components/UnlockButton.tsx","components/ModalInput/ModalInput.tsx","views/Idos/styles.module.scss"],"names":["AuthRoute","Component","component","rest","useWeb3React","account","render","props","to","TOSAuthRoute","StyledHero","styled","div","process","roller","keyframes","LoaderIcon","StyledInput","input","SubscribeButton","button","ErrorMessage","Text","StyledHeading","theme","mediaQueries","sm","StyledText","Loader","Hero","useState","isLoading","setIsLoading","error","setError","address","setAddress","useToast","toastSuccess","toastError","onSubmit","a","EMAIL_REGEX","test","axios","post","email","mb","Container","textAlign","color","alignItems","mt","justifyContent","bold","mr","placeholder","value","type","onChange","e","target","fontSize","ml","onClick","useDeepMemo","memoFn","key","ref","useRef","current","isEqual","getLink","links","label","result","find","link","formatPoolDetail","allTierPool","mappedIndex","filteredData","reduce","accumulate","currentItem","index","totalCommittedAmount","BigNumber","plus","toString","totalAmountPay","totalAmountIDO","swappedAmountIDO","formatIdoContract","formatPoolTotalTierByChainID","allTierPool1","allTierPool2","map","e2","p","tier","swappedAmountPay","getUtcDateString","timestamp","dateIsoFormatted","parseISO","fromUnixTime","toISOString","dateWithOffset","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","format","compareTwoTimestamp","timestamp1","timestamp2","compareAsc","timestampAndCurrentDifference","date1","getDateTypeValue","date2","differenceInSeconds","convertSecondToDay","seconds","day","differenceInDays","hour","differenceInHours","minute","differenceInMinutes","second","useGetTimeOfPool","untilOpen","untilClose","untilClaim","timeStamp","setTimeStamp","useEffect","time","useInterval","callback","delay","savedCallback","chainId","id","setInterval","clearInterval","useSecondsUntilCurrent","numberOfSeconds","setNumberOfSeconds","newSeconds","usePoolStatus","status","setStatus","openAtSeconds","closedAtSeconds","claimAtSeconds","PoolInfoBlock","CardWrapper","Card","lg","IconWrapper","ImageContainer","img","YellowCard","Box","StyledCardBody","CardBody","SecondaryButtonPool","SecondaryButton","ExclusiveButton","SecondaryButtonWhite","PoolDetail","pool","history","useHistory","path","useRouteMatch","useLocation","poolStatus","poolTimeStamp","navigateToProjectDetail","useCallback","push","isPresent","socials","isWhitelist","isExclusive","_img","_name","name","_description","description","_status","_index","poolInfoChainId","Object","keys","totalPoolData","progressPercentage","payToken","minAmountPay","maxAmountPay","useMemo","dividedBy","multipliedBy","toNumber","flexWrap","src","alt","style","cursor","marginBottom","href","scale","fontWeight","get","network","flexDirection","formatNumberWithComma","variant","primaryStep","IfoLayout","PageLoading","numberOfItems","Array","fill","_","backgroundColor","width","height","Wrapper","MobileWrapper","StepWrapper","Flex","Step","StepWithTail","StepContainer","MobileStepWrapper","Dot","isVertical","DotsComponent","numberOfDots","dotArray","overflowX","_dot","IfoStepsDesktop","selectedUserTier","selectedUserEstLua","isShowTierInfor","fontStyle","hoverContent","TIER_HOVER_CONTENT","hoverPlacement","Number","toFixed","IfoStepsMobile","IfoSteps","navigator","userAgent","fadeIn","fadeOut","Row","PoolContainer","xl","Star","Star1","Star6","Star3","Star4","Star5","StepSection","EmptyPool","CurrentIdo","dispatch","useAppDispatch","useSelector","selectOpenPools","openingPools","upcomingPools","isLoadingOpenPools","selectLoadingOpenPools","fetchOpenPools","IdoLayout","pt","pb","length","as","PastIdo","closedPools","selectClosedPools","isLoadingClosedPool","selectLoadingClosedPools","fetchClosedPools","Idos","url","isExact","Page","activeIndex","Link","className","styles","tabStyle","exact","CreateForm","abi","useForm","handleSubmit","register","web3","useWeb3","inputList","contractFunction","inputs","data","gasLimit","from","idoContractAddress","claimAt","closeAt","creator","idoToken","openAt","currentLuaIdoContract","getLuaIdoContract","methods","createIDO","send","mappingIdoResponse","getBalanceNumber","ReadForm","idoData","setIdoData","idoIndex","IDOs","call","idoDetail","mappedData","JSON","stringify","undefined","ApproveToken","library","idoTokenAddress","approveAmount","eProvider","idoTokenContract","getERC20Contract","approve","IncreaseCap","amountIDO","amountPay","increaseCap","DevTools","LuaswapAbi","titleTierObj","useGetTitleOfTier","estLua","titleTier","setTitleTier","useDepositIdo","contractAddress","payTokenAddress","luaIdoContract","useLuaIdoContract","isNativeToken","ZERO_ADDRESS","onDeposit","amount","proofS","depositIdo","txHash","console","info","useRefresh","useContext","RefreshContext","fastRefresh","fast","slowRefresh","slow","useTokenBalance","tokenAddress","decimals","BIG_ZERO","balance","setBalance","userEthBalance","useEthBalance","fetchBalance","contract","getBep20Contract","balanceOf","res","BIG_TEN","pow","useCurrentTime","getTime","currentMillis","setCurrentMillis","timerID","prevMillis","useClaimVesting","vestingContract","useLuaVestingContract","handleClaimVesting","claimVesting","onClaimVesting","DEFAULT_USERINFO","claimAtsTime","claimedAmount","formatVestingUserInfo","userInfo","useVestingInfo","vestingAddress","refetching","setRefetching","userVestingInfo","setData","refetchDataFromContract","fetchData","formatedVestingInfo","log","vestingData","estimateClaim","estimatedClaim","isLoadingVestingInfo","generateClaimInfo","claimTime","claimPercent","i","useClaimRewardIdo","onClaimReward","claimRewardIdo","HOUR_IN_SECONDS","getTimePeriods","delta","Math","abs","timeLeft","hours","minutes","floor","CommitButton","symbol","disabled","ClaimButton","VestingButton","timeNextClaim","userClaimFirstPercent","idoReceivedAmount","claimSymbol","estimatedAmount","timeVesting","isClaimedAllVesting","isReject","percentVesting","userTotalCommitted","currentTimestamp","useTimer","isCurrentTimeOutOfClaimTimeFrame","lastTimeFrame","isDisableClaimOrRefundButton","isDisabledButton","ActionButton","onClaim","onCommit","isApproved","handleApprove","isRequestContractAction","isUserDepositMinimumAmount","paytokenAddress","isIdoAvailalbeOnChain","maxAmountAllowedLeft","depositAmount","isClaimed","isLoadingApproveStatus","minAmount","payTokenBalance","isShowVesting","UnlockButton","endIcon","spin","isMaxAmountEqualZero","isDepositAmountTooLarge","isDepositAmountTooSmall","isDepositAmountLargerThanBalance","isDepositAmountInvalid","comparedTo","isZero","useIsApproved","tokenContract","spenderAddress","setIsApproved","isLoadingApproved","setIsLoadingApproved","fetchAllowanceData","allowance","isGreaterThan","DEFAULT_IDO","addressIdoContract","projectId","TimeBlock","Timer","suffix","timeUntil","useTranslation","t","display","FlexWrapper","DateBlock","TimerBlock","ConnectDateTime","Title","TimerOpen","timeUntilOpen","TimerClose","timeUntilClosed","TimerClaim","timeUntilClaim","TimerCountDown","CountDown","title","date","InfoText","BlockTimerWrapper","isShowPoolData","Deposit","currentPoolData","tierDataOfUser","isAvailalbeOnCurrentNetwork","totalAmountUserSwapped","isLoadingDataFromContract","isLoadingTierInfo","setValue","setIdoReceivedAmount","currentTimeIndex","setCurrentTimeIndex","setIsRequestContractAction","cid","setEstimatedAmount","setCurrentVestingPercentage","paytokenContract","onApprove","approveIdo","tx","useApproveIdo","versionContract","isVesting","minus","rate","calculateSwapRate","currentTimestampInSecond","nextClaimTime","b","getFullDisplayBalance","secondsUntilNextClaim","useSecondsUtilTimestamp","handleSelectMax","handleChange","currentTarget","validity","valid","replace","getClaimProof","poolId","poolIndex","API_IDO_URL","response","claimProofData","receivedIdoAmount","finalPay","fetchReceiveIdoAmount","fetchEstimatedAmount","getCommitProof","onHandleCommit","commitedAmmount","getDecimalAmount","proof","s","v","r","deadline","onHandleClaim","formattedFinalPay","onHandleClaimVesting","isPoolInProgress","isClaimable","minimumClaimableAmount","_minAmountPay","ModalInput","onSelectMax","max","min","inputTitle","secondaryTitle","showWarning","useTotalDataFromAllPools","DateStatusWrapper","PoolDateStatus","dateStamp","setDateStamp","dateValue","setDateValue","StatusBar","CapColumnWrapper","SocialLinkWrapper","PoolTag","PoolWrapper","ProcessColumnWrapper","ProcessAmountWrapper","PoolInfoSocialBlock","PoolSummary","contractData","whitelistLink","totalCommitedPercentage","calculateCommittedAmountPercentage","totalSwapAmountPercentage","calculateSwappedAmountPercentage","isPoolOpen","flex","secondaryStep","textDecoration","rel","ProjectInfoWrapper","LinkWrapper","LinkRef","ProjectInfo","projectDetail","isArray","item","wordBreak","whiteSpace","PoolInfo","calculatedPrice","text","onCopy","TokenInfoWrapper","StyledButton","TokenInfo","idoChainId","onAddToken","filter","provider","window","ethereum","request","method","params","options","image","ExpandableButton","expanded","role","opacity","defaultProps","ExpandingWrapper","Divider","TierContainer","TierHeaderWrapper","TierInformationWrapper","CardBodyWrapper","TierCardContainer","TierCardWrapper","TIER_INFO","icon","CTA","lua","CTA2","tomo","TierCard","userTier","nextTier","disabledBuyMore","showExpandableSection","setShowExpandableSection","addLiquidityUrl","totalCommited","addQuantityLua","TierDetails","secondsUntilSnapshot","userNextTier","selectUserNextTier","tierData","tmps","isPoolStarted","tiersss","chainIds","makeBatchRequest","calls","batch","getWeb3NoAccount","BatchRequest","promises","Promise","resolve","reject","add","err","execute","all","defaultIdoDetail","useDataFromIdoContract","idoIndexes","verionContract","luaVestingAddress","setLuaVestingAddress","setIdoDetail","totalUserCommitted","setTotalUserCommitted","setTotalAmountUserSwapped","currentBlock","useBlock","idosOfEachChainId","idoIndexMap","tokenMap","forEach","idosOfCurrentChainId","ido","luaContractAddress","getWeb3BasedOnChainId","contractIdoDetail","processMultipleChainid","chainids","generatedResponse","idos","dataList","mappedContractIdoList","allTiersDataFromContract","chainIdsIdos","userCommitedAmount","commitedAmount","userSwappedAmountIDO","swappedIdoAmount","getBalanceAmount","vesting","fetchVestingInfo","useTotalDataFromApi","StyledFlex","ProjectDetailBox","PoolInfoBox","TokenInfoBox","Heading","ProjectDetail","isLoaded","setIsLoaded","setIsLoadingTierInfo","userTierAfterSnapshot","setUserTierAfterSnapshot","userEstLuaAfterSnapshot","setUserEstLuaAfterSnapshot","useParams","blockNumber","selectCurrentPool","selectUserTier","userEstLua","selectUserEstLua","isLoadingPool","selectLoadingCurrentPool","idoSupportedNetwork","supportIdoNetwork","join","getIdoSupportedNetwork","fetchPool","getTierDataAfterSnapshot","fetchTierAfterSnapshotTime","setDefaultCurrentPool","allIdos","lodashGet","lodashFind","getIdoDataBasedOnChainIdAndTier","totalUserCommittedFromContract","idoDetailFromContract","includes","String","PageLoader","Steps","isNaN","IdosInfo","lpContract","masterChefContract","ethers","constants","MaxUint256","stake","pid","deposit","times","DEFAULT_TOKEN_DECIMAL","on","transactionHash","commit","userClaim","claim","luaIdoAddress","unstake","withdraw","harvest","claimReward","useAuth","login","logout","onPresentConnectModal","useWalletModal","StyledTokenInput","isWarning","shadows","warning","inset","colors","Input","xs","StyledErrorMessage","isBalanceZero","position","pl","pattern","inputMode","step","external","module","exports"],"mappings":"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","file":"static/js/6.4e1b51f1.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n\r\n  return <Route render={(props) => <Component {...props} />} {...rest} />\r\n}\r\n\r\nexport default AuthRoute\r\n","import React, { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport axios from 'axios'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useModal } from 'luastarter-uikits'\r\nimport TermOfUseModal from 'components/TermOfUseModal'\r\nimport { API_IDO_URL } from 'config'\r\nimport { TOUResponse } from 'views/Idos/types'\r\n\r\nconst TOSAuthRoute = ({ component: Component, ...rest }) => {\r\n  const { account } = useWeb3React()\r\n  // const [onDisplayTermOfUseModal, onDismiss] = useModal(<TermOfUseModal />, false)\r\n\r\n  // useEffect(() => {\r\n  //   const fetchUserTOSInfo = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`${API_IDO_URL}/users/tou/${account}`)\r\n  //       const { touApproved } = response.data as TOUResponse\r\n  //       if (!touApproved) {\r\n  //         onDisplayTermOfUseModal()\r\n  //       } else {\r\n  //         onDismiss()\r\n  //       }\r\n  //     } catch (error) {\r\n  //       onDismiss()\r\n  //       console.log(error, 'Fail to fetch Term of use information')\r\n  //     }\r\n  //   }\r\n\r\n  //   if (account) {\r\n  //     fetchUserTOSInfo()\r\n  //   }\r\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // }, [account])\r\n\r\n  return <Route render={(props) => <Component {...props} />} {...rest} />\r\n}\r\n\r\nexport default TOSAuthRoute\r\n","import React, { useState } from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport axios from 'axios'\r\nimport { Box, Text, Flex } from 'luastarter-uikits'\r\nimport Container from 'components/layout/Container'\r\nimport useToast from 'hooks/useToast'\r\nimport { API_IDO_URL } from 'config'\r\nimport { EMAIL_REGEX } from 'config/constants/idos'\r\n\r\nconst StyledHero = styled.div`\r\n  padding-bottom: 15px;\r\n  padding-top: 15px;\r\n  background-image: url('${process.env.PUBLIC_URL}/images/Group16.png');\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 40px;\r\n`\r\nconst roller = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n`\r\n\r\nconst LoaderIcon = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 40px;\r\n  height: 40px;\r\n  & > div {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    position: absolute;\r\n    width: 24px;\r\n    height: 24px;\r\n    margin: 8px;\r\n    border: 2px solid #1a1a1a;\r\n    border-radius: 50%;\r\n    animation: ${roller} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n    border-color: #1a1a1a transparent transparent transparent;\r\n  }\r\n\r\n  & > div:nth-child(1) {\r\n    animation-delay: -0.45s;\r\n  }\r\n\r\n  & > div:nth-child(2) {\r\n    animation-delay: -0.3s;\r\n  }\r\n\r\n  & > div:nth-child(3) {\r\n    animation-delay: -0.15s;\r\n  }\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  height: 40px;\r\n  outline: none;\r\n  border: 1px solid #ffffff;\r\n  border-top-left-radius: 20px;\r\n  border-bottom-left-radius: 20px;\r\n  background: rgb(234 156 73);\r\n  padding: 0 15px;\r\n  min-width: 250px;\r\n  color: #ffffff;\r\n  &::placeholder {\r\n    color: #ffffff;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    min-width: 200px;\r\n  }\r\n`\r\nconst SubscribeButton = styled.button`\r\n  height: 40px;\r\n  color: #fabc46;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-weight: 700;\r\n  background-color: #ffffff;\r\n  border-top-right-radius: 20px;\r\n  border-bottom-right-radius: 20px;\r\n  padding: 0 10px;\r\n  border: 1px solid #ffffff;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  min-width: 100px;\r\n`\r\nconst ErrorMessage = styled(Text)``\r\n\r\nconst StyledHeading = styled(Text)`\r\n  font-family: 'Racing Sans One', cursive;\r\n  font-size: 30px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 48px;\r\n    line-height: 56px;\r\n  }\r\n`\r\n\r\nconst StyledText = styled(Text)`\r\n  font-size: 20px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    line-height: 32px;\r\n  }\r\n`\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <LoaderIcon>\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </LoaderIcon>\r\n  )\r\n}\r\n\r\nconst Hero = () => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [address, setAddress] = useState(null)\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleChangeAddress = (e) => {\r\n    setError(null)\r\n    setAddress(e?.target?.value)\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      if (!address) {\r\n        setError('Please fill your email address')\r\n        return\r\n      }\r\n\r\n      if (!EMAIL_REGEX.test(address)) {\r\n        setError('Invalid email address')\r\n        return\r\n      }\r\n\r\n      setIsLoading(true)\r\n      await axios.post(`https://api.luaswap.org/api/luastarter/email/subscription`, {\r\n        email: address,\r\n      })\r\n      setIsLoading(false)\r\n      setAddress('')\r\n      toastSuccess('Subscribed')\r\n    } catch (e) {\r\n      setIsLoading(false)\r\n      toastError('Fail to subscribe')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"24px\">\r\n      <StyledHero>\r\n        <Container>\r\n          <StyledHeading mb=\"16px\" textAlign=\"center\" color=\"#FFFFFF\">\r\n            Decentralize your way of investing\r\n          </StyledHeading>\r\n          <Flex alignItems=\"center\" mt=\"20px\" justifyContent=\"center\">\r\n            <StyledText bold textAlign=\"center\" color=\"#FEF5E3\" mr=\"16px\">\r\n              Subscribe to upcoming pools\r\n            </StyledText>\r\n            <Flex justifyContent=\"center\">\r\n              <Box>\r\n                <StyledInput placeholder=\"Your email\" value={address} type=\"email\" onChange={handleChangeAddress} />\r\n                {error && (\r\n                  <ErrorMessage color=\"red\" fontSize=\"12px\" ml=\"5px\" mt=\"5px\">\r\n                    {error}\r\n                  </ErrorMessage>\r\n                )}\r\n              </Box>\r\n              {isLoading ? (\r\n                <SubscribeButton>\r\n                  <Loader />\r\n                </SubscribeButton>\r\n              ) : (\r\n                <SubscribeButton onClick={onSubmit}>Subscribe</SubscribeButton>\r\n              )}\r\n            </Flex>\r\n          </Flex>\r\n        </Container>\r\n      </StyledHero>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import { useRef } from 'react'\r\nimport isEqual from 'lodash/isEqual'\r\n\r\n/**\r\n * Should use this function when your deps array value is object (handle deep comparision)\r\n * Use normal useMemo hook when your deps array is primitive value (no need deep comparision)\r\n */\r\nfunction useDeepMemo<T>(memoFn: () => T, key): T {\r\n  const ref = useRef(null)\r\n  if (!ref.current || !isEqual(key, ref.current.key)) {\r\n    ref.current = { key, value: memoFn() }\r\n  }\r\n\r\n  return ref.current.value\r\n}\r\n\r\nexport default useDeepMemo\r\n","import { ExternalLink } from '../types'\r\n\r\nconst getLink = (links: ExternalLink[], label: string): string | null => {\r\n  if (!links) {\r\n    return null\r\n  }\r\n\r\n  const result = links.find((link) => link.label === label)\r\n\r\n  if (result) {\r\n    return result.link\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default getLink\r\n","import BigNumber from 'bignumber.js'\r\nimport { IdoDetail } from 'state/types'\r\nimport { IdoDetailInfo } from 'views/Idos/types'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const formatPoolDetail = (allTierPool: IdoDetailInfo[]): IdoDetailInfo => {\r\n  const mappedIndex = {}\r\n  const filteredData = allTierPool // .filter((data) => data.tier !== 0)\r\n  return filteredData.reduce(\r\n    (accumulate, currentItem) => {\r\n      if (!mappedIndex[currentItem.index]) {\r\n        mappedIndex[currentItem.index] = true\r\n        return {\r\n          ...accumulate,\r\n          totalCommittedAmount: new BigNumber(accumulate.totalCommittedAmount)\r\n            .plus(new BigNumber(currentItem.totalCommittedAmount))\r\n            .toString(),\r\n          totalAmountPay: new BigNumber(accumulate.totalAmountPay)\r\n            .plus(new BigNumber(currentItem.totalAmountPay))\r\n            .toString(),\r\n          totalAmountIDO: new BigNumber(accumulate.totalAmountIDO)\r\n            .plus(new BigNumber(currentItem.totalAmountIDO))\r\n            .toString(),\r\n          swappedAmountIDO: new BigNumber(accumulate.swappedAmountIDO)\r\n            .plus(new BigNumber(currentItem.swappedAmountIDO))\r\n            .toString(),\r\n        }\r\n      }\r\n      return {\r\n        ...accumulate,\r\n      }\r\n    },\r\n    {\r\n      ...filteredData[0],\r\n      totalCommittedAmount: '0',\r\n      totalAmountPay: '0',\r\n      totalAmountIDO: '0',\r\n      swappedAmountIDO: '0',\r\n    },\r\n  )\r\n}\r\n\r\nexport const formatIdoContract = (allTierPool: IdoDetail[]): IdoDetail => {\r\n  return allTierPool.reduce(\r\n    (accumulate, currentItem) => {\r\n      return {\r\n        ...accumulate,\r\n        totalCommittedAmount: accumulate.totalCommittedAmount + currentItem.totalCommittedAmount,\r\n        totalAmountPay: accumulate.totalAmountPay + currentItem.totalAmountPay,\r\n        totalAmountIDO: accumulate.totalAmountIDO + currentItem.totalAmountIDO,\r\n        swappedAmountIDO: accumulate.swappedAmountIDO + currentItem.swappedAmountIDO,\r\n      }\r\n    },\r\n    {\r\n      ...allTierPool[0],\r\n      totalCommittedAmount: 0,\r\n      totalAmountPay: 0,\r\n      totalAmountIDO: 0,\r\n      swappedAmountIDO: 0,\r\n    },\r\n  )\r\n}\r\n\r\nexport const formatPoolTotalTierByChainID = (\r\n  allTierPool1: IdoDetailInfo[],\r\n  allTierPool2: IdoDetailInfo[],\r\n): IdoDetailInfo[] => {\r\n  return allTierPool1.map((e) => {\r\n    const e2 = allTierPool2.find((p) => p.tier === e.tier)\r\n    if (e2) {\r\n      return {\r\n        ...e,\r\n        totalCommittedAmount: new BigNumber(e.totalCommittedAmount)\r\n          .plus(new BigNumber(e2.totalCommittedAmount))\r\n          .toString(),\r\n        swappedAmountPay: new BigNumber(e.swappedAmountPay).plus(new BigNumber(e2.swappedAmountPay)).toString(),\r\n        totalAmountPay: new BigNumber(e.totalAmountPay).plus(new BigNumber(e2.totalAmountPay)).toString(),\r\n        totalAmountIDO: new BigNumber(e.totalAmountIDO).plus(new BigNumber(e2.totalAmountIDO)).toString(),\r\n      }\r\n    }\r\n    return e\r\n  })\r\n}\r\n","import fromUnixTime from 'date-fns/fromUnixTime'\r\nimport format from 'date-fns/format'\r\nimport parseISO from 'date-fns/parseISO'\r\nimport compareAsc from 'date-fns/compareAsc'\r\nimport differenceInDays from 'date-fns/differenceInDays'\r\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\r\nimport differenceInHours from 'date-fns/differenceInHours'\r\nimport differenceInMinutes from 'date-fns/differenceInMinutes'\r\n\r\nexport const getDateTypeValue = (timestamp): Date | null => {\r\n  if (timestamp) {\r\n    return fromUnixTime(timestamp)\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const getUtcDateString = (timestamp): string | null => {\r\n  if (timestamp) {\r\n    const dateIsoFormatted = parseISO(fromUnixTime(timestamp).toISOString())\r\n    const dateWithOffset = new Date(\r\n      dateIsoFormatted.getUTCFullYear(),\r\n      dateIsoFormatted.getUTCMonth(),\r\n      dateIsoFormatted.getUTCDate(),\r\n      dateIsoFormatted.getUTCHours(),\r\n      dateIsoFormatted.getUTCMinutes(),\r\n      dateIsoFormatted.getUTCSeconds(),\r\n    )\r\n    return `${format(dateWithOffset, 'MMM dd yyyy HH:mm:ss')} UTC`\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const formatDateTime = (timestamp, formatType = 'yyyy-MM-dd'): string | null => {\r\n  if (timestamp) {\r\n    return format(fromUnixTime(timestamp), formatType)\r\n  }\r\n\r\n  return null\r\n}\r\n\r\n// If function return true: current date > timestamp\r\nexport const compareWithCurrentDateTime = (timestamp): boolean => {\r\n  if (timestamp) {\r\n    const result = compareAsc(new Date(), fromUnixTime(timestamp))\r\n\r\n    if (result === 1) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const compareTwoTimestamp = (timestamp1, timestamp2): boolean => {\r\n  if (timestamp1 && timestamp2) {\r\n    const result = compareAsc(fromUnixTime(timestamp1), fromUnixTime(timestamp2))\r\n\r\n    if (result === 1) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const differenceInSecond = (date1: Date, date2: Date): number => {\r\n  if (date1 && date2) {\r\n    return differenceInSeconds(date1, date2)\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const timestampAndCurrentDifference = (timestamp) => {\r\n  if (timestamp) {\r\n    return differenceInSecond(getDateTypeValue(timestamp), new Date())\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const convertSecondToDay = (seconds) => {\r\n  if (seconds) {\r\n    const day = differenceInDays(new Date(seconds * 1000), new Date(0))\r\n    if (day > 0) {\r\n      return ['day', day]\r\n    }\r\n    const hour = differenceInHours(new Date(seconds * 1000), new Date(0))\r\n    if (hour > 0) {\r\n      return ['hour', hour]\r\n    }\r\n    const minute = differenceInMinutes(new Date(seconds * 1000), new Date(0))\r\n    if (minute > 0) {\r\n      return ['minute', minute]\r\n    }\r\n    const second = differenceInSeconds(new Date(seconds * 1000), new Date(0))\r\n    if (second > 0) {\r\n      return ['second', second]\r\n    }\r\n  }\r\n\r\n  return [null, null]\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { convertSecondToDay } from 'utils/formatTime'\r\nimport { Pool } from '../types'\r\n\r\nconst useGetTimeOfPool = ({ untilOpen, untilClose, untilClaim }: Pool): [t: string] => {\r\n  const [timeStamp, setTimeStamp] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (untilOpen) {\r\n      const [time, value] = convertSecondToDay(untilOpen)\r\n      setTimeStamp(`${value} ${time}(s) until pool opens.`)\r\n    } else if (untilClose) {\r\n      const [time, value] = convertSecondToDay(untilClose)\r\n      setTimeStamp(`${value} ${time}(s) until pool closes.`)\r\n    } else if (untilClaim) {\r\n      const [time, value] = convertSecondToDay(untilClaim)\r\n      setTimeStamp(`${value} ${time}(s) until claiming time.`)\r\n    }\r\n  }, [untilOpen, untilClose, untilClaim])\r\n\r\n  return [timeStamp]\r\n}\r\n\r\nexport default useGetTimeOfPool\r\n","/* eslint-disable consistent-return */\r\nimport { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef()\r\n  const { chainId, account } = useWeb3React()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      // @ts-ignore\r\n      savedCallback.current()\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay, chainId, account])\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { timestampAndCurrentDifference } from 'utils/formatTime'\r\nimport useInterval from './useInterval'\r\n\r\n/**\r\n * Counting how many seconds left until specific seconds\r\n */\r\nconst useSecondsUntilCurrent = (seconds) => {\r\n  const [numberOfSeconds, setNumberOfSeconds] = useState(seconds)\r\n\r\n  useEffect(() => {\r\n    setNumberOfSeconds(seconds)\r\n  }, [seconds])\r\n\r\n  useInterval(() => {\r\n    const newSeconds = numberOfSeconds - 1\r\n    if (newSeconds >= 0) {\r\n      setNumberOfSeconds(newSeconds)\r\n    }\r\n  }, 1000)\r\n  return numberOfSeconds\r\n}\r\n\r\n/**\r\n * Counting how many seconds left until specific timestamp\r\n */\r\nexport const useSecondsUtilTimestamp = (timestamp) => {\r\n  const [numberOfSeconds, setNumberOfSeconds] = useState(timestampAndCurrentDifference(timestamp))\r\n\r\n  useEffect(() => {\r\n    setNumberOfSeconds(timestampAndCurrentDifference(timestamp))\r\n  }, [timestamp])\r\n\r\n  useInterval(() => {\r\n    const newSeconds = numberOfSeconds - 1\r\n    if (newSeconds >= 0) {\r\n      setNumberOfSeconds(newSeconds)\r\n    }\r\n  }, 1000)\r\n  return numberOfSeconds\r\n}\r\n\r\nexport default useSecondsUntilCurrent\r\n","import { useState, useEffect } from 'react'\r\nimport { IdoDetailInfo, Pool, PoolStatus } from '../types'\r\nimport useSecondsUntilCurrent from './useSecondsUntilCurrent'\r\n\r\n/**\r\n * Get pool's current status based on timestamp\r\n */\r\nconst usePoolStatus = ({\r\n  untilClaim,\r\n  untilClose,\r\n  untilOpen,\r\n}: Pool): [s: PoolStatus, o: number, c: number, d: number] => {\r\n  const [status, setStatus] = useState(null)\r\n  const openAtSeconds = useSecondsUntilCurrent(untilOpen)\r\n  const closedAtSeconds = useSecondsUntilCurrent(untilClose)\r\n  const claimAtSeconds = useSecondsUntilCurrent(untilClaim)\r\n\r\n  useEffect(() => {\r\n    // If we only has open time, it means that we only allow user to preview the info of the IDO\r\n    if (openAtSeconds > 0 && !closedAtSeconds) {\r\n      setStatus('preview')\r\n      /* If open time > 0 and closed time > 0 -> the Pool is not open yet */\r\n    } else if (openAtSeconds > 0 && closedAtSeconds > 0) {\r\n      setStatus('not open')\r\n    } else if (openAtSeconds <= 0 && closedAtSeconds > 0) {\r\n      setStatus('open')\r\n    } else if (openAtSeconds <= 0 && closedAtSeconds <= 0 && claimAtSeconds > 0) {\r\n      setStatus('claim')\r\n    } else if (openAtSeconds <= 0 && closedAtSeconds <= 0 && claimAtSeconds <= 0) {\r\n      setStatus('closed')\r\n    } else {\r\n      setStatus(null)\r\n    }\r\n  }, [openAtSeconds, closedAtSeconds, claimAtSeconds])\r\n\r\n  return [status, openAtSeconds, closedAtSeconds, claimAtSeconds]\r\n}\r\n\r\nexport default usePoolStatus\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport { useHistory, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardRibbon,\r\n  Text,\r\n  Link,\r\n  Flex,\r\n  TwitterIcon,\r\n  MediumIcon,\r\n  WorldIcon,\r\n  TelegramIcon,\r\n  Progress,\r\n  SecondaryButton,\r\n  Image,\r\n  Box,\r\n  CalendarIcon,\r\n} from 'luastarter-uikits'\r\nimport useDeepMemo from 'hooks/useDeepMemo'\r\nimport getLink from 'views/Idos/utils/getMediaUrl'\r\nimport { formatPoolDetail } from 'utils/formatPoolData'\r\nimport { formatNumberWithComma } from 'utils/formatBalance'\r\nimport get from 'lodash/get'\r\nimport useGetTimeOfPool from 'views/Idos/hooks/useGetTimeOfPool'\r\nimport { Pool, FormatPool } from '../../types'\r\nimport usePoolStatus from '../../hooks/usePoolStatus'\r\n\r\nconst PoolInfoBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst CardWrapper = styled(Card)`\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 100%;\r\n  }\r\n\r\n  &:not(:last-of-type) {\r\n    margin-bottom: 24px;\r\n  }\r\n`\r\n\r\nconst IconWrapper = styled.a`\r\n  margin-right: 14px;\r\n  border-right: ${(props) => (props['hide-border-right'] === 'true' ? 'none' : '1px solid #606060')};\r\n  padding-right: 14px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst ImageContainer = styled.img`\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  cursor: pointer;\r\n  background-color: #e9e9e9;\r\n  margin-right: 10px;\r\n`\r\n\r\nexport const YellowCard = styled(Box)`\r\n  box-sizing: border-box;\r\n  display: inline-block;\r\n  background-color: rgba(225, 169, 63, 0.3);\r\n  color: #fabc46;\r\n  margin-right: 10px;\r\n  font-weight: 600;\r\n  border-radius: 16px;\r\n  padding: 6px 16px;\r\n  transition: background-color 0.2s, opacity 0.2s;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const StyledCardBody = styled(CardBody)`\r\n  height: 300px;\r\n  background-color: #353535;\r\n\r\n  @media (max-width: 1080px) {\r\n    height: auto;\r\n    padding-top: 34px;\r\n    padding-bottom: 34px;\r\n  }\r\n`\r\n\r\nconst SecondaryButtonPool = styled(SecondaryButton)`\r\n  width: auto;\r\n`\r\n\r\nconst ExclusiveButton = styled(SecondaryButtonPool)`\r\n  border: none;\r\n  background-color: #606060;\r\n  padding: 8px 16px;\r\n  width: auto;\r\n`\r\n\r\nconst SecondaryButtonWhite = styled(SecondaryButtonPool)`\r\n  border-color: #fffcf6;\r\n`\r\n\r\ninterface PoolDetailProps {\r\n  pool: Pool\r\n}\r\n\r\nconst PoolDetail: React.FC<PoolDetailProps> = ({ pool }) => {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n  const { chainId } = useWeb3React()\r\n  const location = useLocation()\r\n  const [poolStatus] = usePoolStatus(pool)\r\n  const [poolTimeStamp] = useGetTimeOfPool(pool)\r\n  const navigateToProjectDetail = useCallback(() => {\r\n    history.push(`${path}/project/${pool.id}`)\r\n  }, [history, path, pool.id])\r\n  const { isPresent, socials, isWhitelist, untilOpen, untilClose, untilClaim, isExclusive } = pool\r\n  const {\r\n    img,\r\n    name,\r\n    description,\r\n    totalCommittedAmount,\r\n    totalAmountPay,\r\n    totalAmountIDO,\r\n    swappedAmountIDO,\r\n    status,\r\n    payToken,\r\n    minAmountPay,\r\n    maxAmountPay,\r\n  } = useDeepMemo<FormatPool>(() => {\r\n    const { img: _img, name: _name, description: _description, status: _status, index: _index } = pool\r\n    const poolInfoChainId = Object.keys(_index).map((id) => {\r\n      return formatPoolDetail(_index[id])\r\n    })\r\n    const totalPoolData = formatPoolDetail(poolInfoChainId)\r\n    return {\r\n      img: _img,\r\n      name: _name,\r\n      description: _description,\r\n      status: _status,\r\n      ...totalPoolData,\r\n    }\r\n  }, [pool, chainId])\r\n\r\n  const progressPercentage = useMemo(() => {\r\n    if (poolStatus === 'closed') {\r\n      return new BigNumber(swappedAmountIDO).dividedBy(new BigNumber(totalAmountIDO)).multipliedBy(100).toNumber()\r\n    }\r\n\r\n    if (totalCommittedAmount && totalAmountPay) {\r\n      return new BigNumber(totalCommittedAmount).dividedBy(new BigNumber(totalAmountPay)).multipliedBy(100).toNumber()\r\n    }\r\n\r\n    return 0\r\n  }, [totalCommittedAmount, totalAmountPay, poolStatus, swappedAmountIDO, totalAmountIDO])\r\n\r\n  return (\r\n    <CardWrapper>\r\n      <StyledCardBody>\r\n        <Flex alignItems=\"flex-start\" justifyContent=\"space-between\" flexWrap=\"wrap\">\r\n          <Flex mb=\"15px\" alignItems=\"center\">\r\n            <ImageContainer src={img} alt=\"img\" onClick={navigateToProjectDetail} />\r\n            <PoolInfoBlock>\r\n              <Text\r\n                fontSize=\"24px\"\r\n                bold\r\n                onClick={navigateToProjectDetail}\r\n                style={{\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                {name}\r\n              </Text>\r\n              <Flex marginBottom=\"5px\" alignItems=\"center\">\r\n                <IconWrapper href={getLink(socials, 'TELEGRAM')} target=\"__blank\">\r\n                  <TelegramIcon />\r\n                </IconWrapper>\r\n                <IconWrapper href={getLink(socials, 'TWITTER')} target=\"__blank\">\r\n                  <TwitterIcon />\r\n                </IconWrapper>\r\n                <IconWrapper href={getLink(socials, 'MEDIUM')} target=\"__blank\">\r\n                  <MediumIcon />\r\n                </IconWrapper>\r\n                <IconWrapper href={getLink(socials, 'FORUM')} target=\"__blank\" hide-border-right=\"true\">\r\n                  <WorldIcon />\r\n                </IconWrapper>\r\n              </Flex>\r\n            </PoolInfoBlock>\r\n          </Flex>\r\n          {isExclusive ? (\r\n            <ExclusiveButton onClick={navigateToProjectDetail} scale=\"sm\" mb=\"15px\">\r\n              <Text fontSize=\"10px\" color=\"#FABC46\" fontWeight=\"bold\">\r\n                EXCLUSIVE POOL\r\n              </Text>\r\n            </ExclusiveButton>\r\n          ) : (\r\n            <>\r\n              {!isWhitelist ? (\r\n                <SecondaryButtonPool onClick={navigateToProjectDetail} scale=\"sm\" mb=\"15px\">\r\n                  <Text fontSize=\"10px\" color=\"#FABC46\" fontWeight=\"bold\">\r\n                    TIER MEMBER\r\n                  </Text>\r\n                </SecondaryButtonPool>\r\n              ) : (\r\n                <SecondaryButtonWhite onClick={navigateToProjectDetail} scale=\"sm\" mb=\"15px\">\r\n                  <Text fontSize=\"10px\" color=\"#FFFCF6\" fontWeight=\"bold\">\r\n                    WHITELIST MEMBER\r\n                  </Text>\r\n                </SecondaryButtonWhite>\r\n              )}\r\n            </>\r\n          )}\r\n        </Flex>\r\n        <Box>\r\n          {get(pool, 'network', []).map((network) => {\r\n            return <YellowCard>{network}</YellowCard>\r\n          })}\r\n        </Box>\r\n        {poolTimeStamp && (\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <CalendarIcon />\r\n            <Text ml=\"8px\">{poolTimeStamp}</Text>\r\n          </Flex>\r\n        )}\r\n        <Text color=\"#C3C3C3\" mt=\"16px\">\r\n          {description}\r\n        </Text>\r\n        {!isPresent && (\r\n          <>\r\n            <Flex justifyContent=\"space-between\" mb=\"4px\" mt=\"16px\">\r\n              <Flex justifyContent=\"flex-start\" flexDirection=\"row\">\r\n                <Text color=\"#8B8B8B\" mr=\"5px\">\r\n                  Cap:{' '}\r\n                </Text>\r\n                <Text color=\"primary\" fontWeight=\"600\">\r\n                  {formatNumberWithComma(totalAmountIDO, true)}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n            <Progress variant=\"round\" scale=\"sm\" primaryStep={progressPercentage} />\r\n          </>\r\n        )}\r\n      </StyledCardBody>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nexport default PoolDetail\r\n","import styled from 'styled-components'\r\n\r\nconst IfoLayout = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n`\r\n\r\nexport default IfoLayout\r\n","import React from 'react'\r\nimport { Skeleton, Card, CardBody, Flex } from 'luastarter-uikits'\r\nimport styled from 'styled-components'\r\n\r\nconst CardWrapper = styled(Card)`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst PageLoading = ({ numberOfItems = 1 }) => {\r\n  return (\r\n    <>\r\n      {new Array(numberOfItems).fill(0).map((_) => {\r\n        return (\r\n          <CardWrapper key={_ + 1}>\r\n            <CardBody\r\n              style={{\r\n                backgroundColor: '#353535',\r\n              }}\r\n            >\r\n              <Flex>\r\n                <Skeleton width=\"60px\" height=\"60px\" variant=\"circle\" mr=\"15px\" mb=\"15px\" />\r\n                <Flex flexDirection=\"column\">\r\n                  <Skeleton width=\"100px\" mb=\"10px\" />\r\n                  <Flex>\r\n                    <Skeleton width=\"20px\" height=\"20px\" variant=\"circle\" mb=\"15px\" mr=\"5px\" />\r\n                    <Skeleton width=\"20px\" height=\"20px\" variant=\"circle\" mb=\"15px\" mr=\"5px\" />\r\n                    <Skeleton width=\"20px\" height=\"20px\" variant=\"circle\" mb=\"15px\" mr=\"5px\" />\r\n                    <Skeleton width=\"20px\" height=\"20px\" variant=\"circle\" mb=\"15px\" mr=\"5px\" />\r\n                  </Flex>\r\n                </Flex>\r\n              </Flex>\r\n              <Skeleton />\r\n              <Flex justifyContent=\"space-between\" mt=\"20px\">\r\n                <Flex flexDirection=\"column\">\r\n                  <Skeleton width=\"50px\" mb=\"5px\" />\r\n                  <Skeleton width=\"50px\" mb=\"5px\" />\r\n                </Flex>\r\n                <Flex flexDirection=\"column\">\r\n                  <Skeleton width=\"50px\" mb=\"5px\" />\r\n                  <Skeleton width=\"50px\" mb=\"5px\" />\r\n                </Flex>\r\n              </Flex>\r\n              <Skeleton mt=\"10px\" />\r\n            </CardBody>\r\n          </CardWrapper>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageLoading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Text, Flex, TertiaryMessage } from 'luastarter-uikits'\r\nimport { TIER_HOVER_CONTENT } from 'config/constants/idos'\r\n\r\ninterface DotProps {\r\n  isVertical: boolean\r\n}\r\n\r\nconst Wrapper = styled(Box)`\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding: 24px;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  background-color: #282828;\r\n  height: 240px;\r\n`\r\nconst MobileWrapper = styled(Box)`\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding: 24px;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  background-color: #282828;\r\n`\r\n\r\nconst StepWrapper = styled(Flex)`\r\n  margin-bottom: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Step = styled(Box)`\r\n  background-color: #fabc46;\r\n  width: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 40px;\r\n  margin-right: 14px;\r\n  border-radius: 50%;\r\n  border: 4px solid #5b4c2f;\r\n\r\n  &:before {\r\n    border-radius: 50%;\r\n    border: 4px solid #3a352a;\r\n    width: 48px;\r\n    height: 48px;\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n  }\r\n`\r\nconst StepWithTail = styled(Step)`\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    top: 18px;\r\n    left: 44px;\r\n    width: 90%;\r\n    height: 10px;\r\n    border-top: 4px dotted #e1a93f;\r\n  }\r\n`\r\n\r\nconst StepContainer = styled(Flex)`\r\n  width: calc(25% - 15px);\r\n  position: relative;\r\n  &:not(:last-of-type) {\r\n    margin-right: 15px;\r\n  }\r\n`\r\n\r\nconst MobileStepWrapper = styled(Flex)`\r\n  background-color: #1a1a1a;\r\n  padding: 14px;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n`\r\n\r\nconst Dot = styled(Box)<DotProps>`\r\n  width: 3px;\r\n  height: 3px;\r\n  background-color: #e1a93f;\r\n  border-radius: 50%;\r\n  margin-right: ${(props) => (props.isVertical ? '0px' : '8px')};\r\n  &:not(:last-of-type) {\r\n    margin-bottom: ${(props) => (props.isVertical ? '8px' : '0px')};\r\n  }\r\n\r\n  @media screen and (max-width: 1500px) {\r\n    margin-right: 5px;\r\n  }\r\n`\r\nconst DotsComponent = ({ numberOfDots, isVertical = false }) => {\r\n  const dotArray = new Array(numberOfDots).fill(0)\r\n\r\n  return (\r\n    <Flex flexDirection={isVertical ? 'column' : 'row'} overflowX=\"hidden\">\r\n      {dotArray.map((_dot) => {\r\n        return <Dot isVertical={isVertical} />\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst IfoStepsDesktop: React.FC<{ selectedUserTier?: string; selectedUserEstLua?: number; isShowTierInfor: boolean }> =\r\n  ({ selectedUserTier, selectedUserEstLua, isShowTierInfor }) => {\r\n    return (\r\n      <Wrapper>\r\n        <StepWrapper>\r\n          <StepContainer alignItems=\"center\">\r\n            <StepWithTail>\r\n              <Text bold color=\"#353535\">\r\n                1\r\n              </Text>\r\n            </StepWithTail>\r\n          </StepContainer>\r\n          <StepContainer alignItems=\"center\">\r\n            <StepWithTail>\r\n              <Text bold color=\"#353535\">\r\n                2\r\n              </Text>\r\n            </StepWithTail>\r\n          </StepContainer>\r\n          <StepContainer alignItems=\"center\">\r\n            <StepWithTail>\r\n              <Text bold color=\"#353535\">\r\n                3\r\n              </Text>\r\n            </StepWithTail>\r\n          </StepContainer>\r\n          <StepContainer alignItems=\"center\">\r\n            <Step>\r\n              <Text bold color=\"#353535\">\r\n                4\r\n              </Text>\r\n            </Step>\r\n          </StepContainer>\r\n        </StepWrapper>\r\n        <Flex>\r\n          <Box width=\"25%\" mr=\"15px\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              Connect to your wallet\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">Connect your wallet to participate in the IDO</Text>\r\n            <Text color=\"red\" fontSize=\"11px\" fontStyle=\"italic\">\r\n              Connect your wallet to LuaStarter at least 3 days before the IDO opens to complete your registration\r\n            </Text>\r\n          </Box>\r\n          <Box width=\"25%\" mr=\"15px\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              Guarantee your spot\r\n            </Text>\r\n            <TertiaryMessage hoverContent={TIER_HOVER_CONTENT} hoverPlacement=\"right\" color=\"#8B8B8B\">\r\n              Stake more LUA to be qualified for a higher tier level\r\n            </TertiaryMessage>\r\n            {isShowTierInfor && (\r\n              <Text color=\"#8B8B8B\">\r\n                Your Tier: {selectedUserTier} (Est LUA: {Number(selectedUserEstLua).toFixed(2)})\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box width=\"25%\" mr=\"15px\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              At IDO time\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">Purchase your token by committing between the mininum and maximum set value.</Text>\r\n          </Box>\r\n          <Box width=\"25%\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              After IDO time\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">\r\n              Claim the tokens you have purchased. Any unspent assets will be returned to your wallet.\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </Wrapper>\r\n    )\r\n  }\r\n\r\nconst IfoStepsMobile: React.FC<{ selectedUserTier?: string; selectedUserEstLua?: number; isShowTierInfor: boolean }> =\r\n  ({ selectedUserTier, selectedUserEstLua, isShowTierInfor }) => {\r\n    return (\r\n      <MobileWrapper>\r\n        <MobileStepWrapper alignItems=\"center\" justifyContent=\"center\">\r\n          <Step width=\"25%\">\r\n            <Text bold color=\"#353535\">\r\n              1\r\n            </Text>\r\n          </Step>\r\n          <Box width=\"75%\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              Connect to your wallet\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">Connect your wallet to participate in the IDO</Text>\r\n            <Text color=\"red\" fontSize=\"11px\" fontStyle=\"italic\">\r\n              Connect your wallet to LuaStarter at least 3 days before the IDO opens to complete your registration\r\n            </Text>\r\n          </Box>\r\n        </MobileStepWrapper>\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"8px\" mt=\"8px\">\r\n          <DotsComponent isVertical numberOfDots={10} />\r\n        </Flex>\r\n        <MobileStepWrapper alignItems=\"center\" justifyContent=\"center\">\r\n          <Step width=\"25%\">\r\n            <Text bold color=\"#353535\">\r\n              2\r\n            </Text>\r\n          </Step>\r\n          <Box width=\"75%\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              Guarantee your spot\r\n            </Text>\r\n            <TertiaryMessage hoverContent={TIER_HOVER_CONTENT} hoverPlacement=\"top\" color=\"#8B8B8B\">\r\n              Stake more LUA to be qualified for a higher tier level\r\n            </TertiaryMessage>\r\n            {isShowTierInfor && (\r\n              <Text color=\"#8B8B8B\">\r\n                Your Tier: {selectedUserTier} (Est LUA: {Number(selectedUserEstLua).toFixed(2)})\r\n              </Text>\r\n            )}\r\n          </Box>\r\n        </MobileStepWrapper>\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"8px\" mt=\"8px\">\r\n          <DotsComponent isVertical numberOfDots={10} />\r\n        </Flex>\r\n        <MobileStepWrapper alignItems=\"center\" justifyContent=\"center\">\r\n          <Step width=\"25%\">\r\n            <Text bold color=\"#353535\">\r\n              3\r\n            </Text>\r\n          </Step>\r\n          <Box width=\"75%\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              At IDO time\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">Purchase your token by committing between the mininum and maximum set value.</Text>\r\n          </Box>\r\n        </MobileStepWrapper>\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"8px\" mt=\"8px\">\r\n          <DotsComponent isVertical numberOfDots={10} />\r\n        </Flex>\r\n        <MobileStepWrapper alignItems=\"center\" justifyContent=\"center\">\r\n          <Step width=\"25%\">\r\n            <Text bold color=\"#353535\">\r\n              4\r\n            </Text>\r\n          </Step>\r\n          <Box width=\"75%\">\r\n            <Text bold color=\"#F6F6F6\">\r\n              After IDO time\r\n            </Text>\r\n            <Text color=\"#8B8B8B\">\r\n              {' '}\r\n              Claim the tokens you have purchased. Any unspent assets will be returned to your wallet.\r\n            </Text>\r\n          </Box>\r\n        </MobileStepWrapper>\r\n      </MobileWrapper>\r\n    )\r\n  }\r\n\r\nconst IfoSteps: React.FC<{\r\n  selectedUserTier?: string\r\n  selectedUserEstLua?: number\r\n  isShowTierInfor: boolean\r\n}> = ({ selectedUserTier, isShowTierInfor, selectedUserEstLua }) => {\r\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\r\n  return isMobile ? (\r\n    <IfoStepsMobile\r\n      selectedUserTier={selectedUserTier}\r\n      isShowTierInfor={isShowTierInfor}\r\n      selectedUserEstLua={selectedUserEstLua}\r\n    />\r\n  ) : (\r\n    <IfoStepsDesktop\r\n      selectedUserTier={selectedUserTier}\r\n      isShowTierInfor={isShowTierInfor}\r\n      selectedUserEstLua={selectedUserEstLua}\r\n    />\r\n  )\r\n}\r\n\r\nexport default IfoSteps\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect } from 'react'\r\nimport { Text, Flex, Box, Heading } from 'luastarter-uikits'\r\nimport { useSelector } from 'react-redux'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { fetchOpenPools, selectLoadingOpenPools, selectOpenPools } from 'state/ido'\r\nimport { useAppDispatch } from 'state'\r\nimport PoolDetail from './PoolDetail'\r\nimport IdoLayout from './IdoLayout'\r\nimport PageLoading from './PageLoading'\r\nimport { Pool } from '../types'\r\nimport IfoSteps from './ProjectDetail/Steps'\r\n\r\nconst fadeIn = keyframes`\r\n  from {\r\n    transform: scale(.25);\r\n    opacity: 0;\r\n  }\r\n\r\n  to {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst fadeOut = keyframes`\r\n  from {\r\n    transform: scale(1);\r\n    opacity: 0;\r\n  }\r\n\r\n  to {\r\n    transform: scale(.25);\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst Row = styled.div`\r\n  margin: 0 auto;\r\n`\r\nconst PoolContainer = styled.div`\r\n  border-radius: 24px;\r\n  background-color: #282828;\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 0px 24px;\r\n  padding-bottom: 24px;\r\n  margin-bottom: 14px;\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-right: 14px;\r\n    margin-bottom: 0px;\r\n    width: calc(50% - 14px);\r\n  }\r\n`\r\n\r\nconst Star = styled(Box)`\r\n  position: absolute;\r\n  background-image: url('${process.env.PUBLIC_URL}/images/star.svg');\r\n  background-size: contain;\r\n  overflow: hidden;\r\n`\r\nconst Star1 = styled(Star)`\r\n  width: 30px;\r\n  height: 30px;\r\n  top: 10px;\r\n  left: 40%;\r\n  animation: ${fadeIn} 0.5s linear infinite, ${fadeOut} 2s linear infinite;\r\n  animation-fill-mode: both;\r\n  animation-delay: 500ms;\r\n`\r\nconst Star6 = styled(Star)`\r\n  width: 30px;\r\n  height: 30px;\r\n  top: 60px;\r\n  left: 38%;\r\n  animation: ${fadeIn} 0.5s linear infinite, ${fadeOut} 3s linear infinite;\r\n  animation-fill-mode: both;\r\n  animation-delay: 500ms;\r\n`\r\n\r\nconst Star3 = styled(Star)`\r\n  width: 35px;\r\n  height: 35px;\r\n  top: 20px;\r\n  right: 30px;\r\n  animation: ${fadeIn} 1s linear infinite, ${fadeOut} 3s linear infinite;\r\n  animation-fill-mode: both;\r\n  animation-delay: 1s;\r\n`\r\n\r\nconst Star4 = styled(Star)`\r\n  width: 20px;\r\n  height: 20px;\r\n  bottom: 20px;\r\n  left: 10px;\r\n  animation: ${fadeIn} 0.1s linear infinite, ${fadeOut} 1.5s linear infinite;\r\n  animation-fill-mode: both;\r\n  animation-delay: 800ms;\r\n`\r\n\r\nconst Star5 = styled(Star)`\r\n  width: 40px;\r\n  height: 40px;\r\n  bottom: 10px;\r\n  left: 20px;\r\n  animation: ${fadeIn} 2s linear infinite, ${fadeOut} 1.5s linear infinite;\r\n  animation-fill-mode: both;\r\n  animation-delay: 700ms;\r\n`\r\n\r\nconst StepSection = styled.div`\r\n  margin-top: 30px;\r\n`\r\nconst EmptyPool = () => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <img src={`${process.env.PUBLIC_URL}/images/empty.svg`} alt=\"empty\" />\r\n      <Text color=\"#606060\" textAlign=\"center\">\r\n        No Data\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst CurrentIdo: React.FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { openingPools, upcomingPools } = useSelector(selectOpenPools)\r\n  const isLoadingOpenPools = useSelector(selectLoadingOpenPools)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchOpenPools())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <IdoLayout>\r\n      <Flex flexWrap=\"wrap\">\r\n        <PoolContainer>\r\n          <Text fontSize=\"24px\" textAlign=\"center\" color=\"#F6F6F6\" pt=\"24px\" pb=\"24px\" fontWeight=\"700\">\r\n            Opening Pools\r\n          </Text>\r\n          <Row>\r\n            {isLoadingOpenPools ? (\r\n              <PageLoading />\r\n            ) : openingPools.length === 0 ? (\r\n              <EmptyPool />\r\n            ) : (\r\n              <>\r\n                {openingPools.map((pool) => {\r\n                  return <PoolDetail pool={pool} />\r\n                })}\r\n                <Star1 />\r\n                <Star3 />\r\n                <Star4 />\r\n                <Star5 />\r\n                <Star6 />\r\n              </>\r\n            )}\r\n          </Row>\r\n        </PoolContainer>\r\n        <PoolContainer>\r\n          <Text fontSize=\"24px\" textAlign=\"center\" color=\"#8B8B8B\" pt=\"24px\" pb=\"24px\" fontWeight=\"700\">\r\n            Upcoming Pools\r\n          </Text>\r\n          <Row>\r\n            {isLoadingOpenPools ? (\r\n              <PageLoading />\r\n            ) : upcomingPools.length === 0 ? (\r\n              <EmptyPool />\r\n            ) : (\r\n              <>\r\n                {upcomingPools.map((pool) => {\r\n                  return <PoolDetail pool={pool} />\r\n                })}\r\n              </>\r\n            )}\r\n          </Row>\r\n        </PoolContainer>\r\n      </Flex>\r\n      <StepSection>\r\n        <Heading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\" mb=\"20px\">\r\n          How to LuaStarts\r\n        </Heading>\r\n        <IfoSteps isShowTierInfor={false} />\r\n      </StepSection>\r\n    </IdoLayout>\r\n  )\r\n}\r\n\r\nexport default CurrentIdo\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex } from 'luastarter-uikits'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchClosedPools, selectClosedPools, selectLoadingClosedPools } from 'state/ido'\r\nimport { Pool } from '../types'\r\nimport IdoLayout from './IdoLayout'\r\nimport PoolDetail from './PoolDetail'\r\nimport PageLoading from './PageLoading'\r\n\r\nconst PoolContainer = styled(IdoLayout)`\r\n  grid-template-columns: 1fr 1fr;\r\n\r\n  @media (max-width: 1366px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`\r\nconst CardWrapper = styled(Flex)`\r\n  border-radius: 24px;\r\n  background-color: #282828;\r\n  width: 50%;\r\n  padding: 48px 0px;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 1366px) {\r\n    width: 70%;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 90%;\r\n  }\r\n`\r\n\r\nconst EmptyPool = () => {\r\n  return (\r\n    <CardWrapper alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <img src={`${process.env.PUBLIC_URL}/images/empty.svg`} alt=\"empty\" />\r\n      <Text color=\"#606060\" textAlign=\"center\">\r\n        No Data\r\n      </Text>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nconst PastIdo: React.FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const closedPools = useSelector(selectClosedPools)\r\n  const isLoadingClosedPool = useSelector(selectLoadingClosedPools)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchClosedPools())\r\n  }, [dispatch])\r\n\r\n  if (closedPools.length === 0 && !isLoadingClosedPool) {\r\n    return <EmptyPool />\r\n  }\r\n\r\n  return (\r\n    <PoolContainer>\r\n      {isLoadingClosedPool ? (\r\n        <PageLoading />\r\n      ) : (\r\n        <>\r\n          {closedPools.map((pool) => {\r\n            return <PoolDetail pool={pool} />\r\n          })}\r\n        </>\r\n      )}\r\n    </PoolContainer>\r\n  )\r\n}\r\n\r\nexport default PastIdo\r\n","import React from 'react'\r\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\r\nimport { Flex, SecondaryButtonMenu, SecondaryMenuItem, useModal } from 'luastarter-uikits'\r\nimport Page from 'components/layout/Page'\r\nimport Hero from './components/Hero'\r\nimport CurrentIdo from './components/CurrentIdo'\r\nimport PastIdo from './components/PastIdo'\r\nimport styles from './styles.module.scss'\r\n\r\nconst Idos = () => {\r\n  const { path, url, isExact } = useRouteMatch()\r\n\r\n  return (\r\n    <>\r\n      <Page>\r\n        <Hero />\r\n        <Flex mb=\"32px\" alignItems=\"center\" justifyContent=\"center\">\r\n          <SecondaryButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"primary\">\r\n            <SecondaryMenuItem as={Link} to={`${url}`} pt=\"24px\" pb=\"24px\" className={styles.tabStyle}>\r\n              OPENING POOLS\r\n            </SecondaryMenuItem>\r\n            <SecondaryMenuItem as={Link} to={`${url}/history`} pt=\"24px\" pb=\"24px\" className={styles.tabStyle}>\r\n              PREVIOUS POOLS\r\n            </SecondaryMenuItem>\r\n          </SecondaryButtonMenu>\r\n        </Flex>\r\n        <Route exact path={`${path}`}>\r\n          <CurrentIdo />\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          <PastIdo />\r\n        </Route>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Idos\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Input, Button, Box, Text, Flex } from 'luastarter-uikits'\r\nimport { getLuaIdoContract } from 'utils/contractHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst CreateForm = ({ abi }) => {\r\n  const { handleSubmit, register } = useForm()\r\n  const web3 = useWeb3()\r\n  const { account, chainId } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const inputList = abi.find((contractFunction) => contractFunction.name === 'createIDO')?.inputs\r\n\r\n  const onSubmit = async (data) => {\r\n    const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n    try {\r\n      const {\r\n        idoContractAddress,\r\n        claimAt,\r\n        closeAt,\r\n        creator,\r\n        idoToken,\r\n        maxAmountPay,\r\n        minAmountPay,\r\n        openAt,\r\n        payToken,\r\n        totalAmountIDO,\r\n        totalAmountPay,\r\n      } = data\r\n      const currentLuaIdoContract = getLuaIdoContract(web3, idoContractAddress)\r\n      const result = await currentLuaIdoContract.methods\r\n        .createIDO(\r\n          creator,\r\n          idoToken,\r\n          payToken,\r\n          totalAmountIDO,\r\n          totalAmountPay,\r\n          minAmountPay,\r\n          maxAmountPay,\r\n          openAt,\r\n          closeAt,\r\n          claimAt,\r\n        )\r\n        .send(gasLimit)\r\n      toastSuccess('Deploy contract success')\r\n    } catch (error) {\r\n      toastError('Deploy contract fail')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Text fontSize=\"24px\" mt=\"14px\">\r\n        Create Ido\r\n      </Text>\r\n      <Box mt=\"12px\">\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO address</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoContractAddress')} />\r\n        </Flex>\r\n        {inputList.map((input) => {\r\n          return (\r\n            <Flex mb=\"10px\">\r\n              <Text width=\"15%\">{input.name}</Text>\r\n              <Input width=\"80%\" scale=\"md\" type=\"text\" {...register(input.name)} />\r\n            </Flex>\r\n          )\r\n        })}\r\n      </Box>\r\n      <Button>Submit</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CreateForm\r\n","/* eslint-disable import/no-cycle */\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { IdoDetail } from '../types'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const mappingIdoResponse = ({\r\n  claimAt,\r\n  closeAt,\r\n  creator,\r\n  idoToken,\r\n  maxAmountPay,\r\n  minAmountPay,\r\n  openAt,\r\n  payToken,\r\n  swappedAmountIDO,\r\n  swappedAmountPay,\r\n  totalAmountIDO,\r\n  totalAmountPay,\r\n  totalCommittedAmount,\r\n}): IdoDetail => {\r\n  return {\r\n    claimAt,\r\n    closeAt,\r\n    creator,\r\n    idoToken,\r\n    maxAmountPay: getBalanceNumber(maxAmountPay),\r\n    minAmountPay: getBalanceNumber(minAmountPay),\r\n    openAt,\r\n    payToken,\r\n    swappedAmountIDO: getBalanceNumber(swappedAmountIDO),\r\n    swappedAmountPay: getBalanceNumber(swappedAmountPay),\r\n    totalAmountIDO: getBalanceNumber(totalAmountIDO),\r\n    totalAmountPay: getBalanceNumber(totalAmountPay),\r\n    totalCommittedAmount: getBalanceNumber(totalCommittedAmount),\r\n  }\r\n}\r\n\r\n// export const fetchIdosInformation = async (chainId: number, web3?: Web3): Promise<IdoDetail[]> => {\r\n//   try {\r\n//     const idoList = []\r\n//     const luaIdoContract = getLuaIdoContract(web3, chainId)\r\n//     const numberOfIdo = await luaIdoContract.methods.numberOfIDO().call()\r\n\r\n//     for (let i = 0; i < numberOfIdo; i++) {\r\n//       const idoDetail = luaIdoContract.methods.IDOs(i).call()\r\n//       idoList.push(idoDetail)\r\n//     }\r\n\r\n//     const result = await Promise.all(idoList)\r\n//     return result.map((item) => mappingIdoResponse(item))\r\n//   } catch (error) {\r\n//     console.log(error, 'fail to fetch')\r\n//     return []\r\n//   }\r\n// }\r\n","import React, { useState } from 'react'\r\nimport { Text, Input, Box, Flex, Button } from 'luastarter-uikits'\r\nimport { useForm } from 'react-hook-form'\r\nimport { getLuaIdoContract } from 'utils/contractHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport useToast from 'hooks/useToast'\r\nimport { mappingIdoResponse } from 'state/ido/fetchIdosData'\r\n\r\nconst ReadForm = () => {\r\n  const { register, handleSubmit } = useForm()\r\n  const [idoData, setIdoData] = useState(null)\r\n  const web3 = useWeb3()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const { idoContractAddress, idoIndex } = data\r\n      const currentLuaIdoContract = getLuaIdoContract(web3, idoContractAddress)\r\n      const idoDetail = await currentLuaIdoContract.methods.IDOs(idoIndex).call()\r\n      const mappedData = mappingIdoResponse(idoDetail)\r\n      setIdoData(mappedData)\r\n    } catch (error) {\r\n      setIdoData(null)\r\n      toastError('Fail to fetch data, maybe pool index is not existed')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Text fontSize=\"24px\" mb=\"12px\">\r\n        Read Ido\r\n      </Text>\r\n      <Box>\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO address</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoContractAddress')} />\r\n        </Flex>\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO index</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoIndex')} />\r\n        </Flex>\r\n      </Box>\r\n      <Flex>\r\n        <Button type=\"submit\" mb=\"14px\" mr=\"14px\">\r\n          Read\r\n        </Button>\r\n        <Button type=\"button\" onClick={() => setIdoData(null)}>\r\n          Clear data\r\n        </Button>\r\n      </Flex>\r\n      <pre>{idoData && JSON.stringify(idoData, undefined, 2)}</pre>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ReadForm\r\n","import React from 'react'\r\nimport { Text, Box, Flex, Input, Button } from 'luastarter-uikits'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useForm } from 'react-hook-form'\r\nimport { getERC20Contract } from 'utils/contractHelpers'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst ApproveToken = () => {\r\n  const { library, chainId, account } = useWeb3React()\r\n  const { register, handleSubmit } = useForm()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const { idoTokenAddress, idoContractAddress, approveAmount } = data\r\n      const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n      const eProvider = library || null\r\n      const idoTokenContract = getERC20Contract(eProvider, idoTokenAddress, chainId)\r\n      const result = await idoTokenContract.methods.approve(idoContractAddress, approveAmount).send(gasLimit)\r\n      toastSuccess('Successfully approve ido contract')\r\n    } catch (error) {\r\n      toastError('Fail to approve ido contract')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Text fontSize=\"24px\" mt=\"14px\" mb=\"12px\">\r\n        Approve Token\r\n      </Text>\r\n      <Box>\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO address</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoContractAddress')} />\r\n        </Flex>\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO Token Address</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoTokenAddress')} />\r\n        </Flex>\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">Approve Amount</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('approveAmount')} />\r\n        </Flex>\r\n      </Box>\r\n      <Button type=\"submit\" mb=\"14px\" mr=\"14px\">\r\n        Approve\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ApproveToken\r\n","import React from 'react'\r\nimport { Input, Button, Box, Text, Flex } from 'luastarter-uikits'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getLuaIdoContract } from 'utils/contractHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst IncreaseCap = ({ abi }) => {\r\n  const { handleSubmit, register } = useForm()\r\n  const web3 = useWeb3()\r\n  const { account, chainId } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const inputList = abi.find((contractFunction) => contractFunction.name === 'increaseCap')?.inputs\r\n\r\n  const onSubmit = async (data) => {\r\n    const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n    try {\r\n      const { idoContractAddress, index, amountIDO, amountPay } = data\r\n      const currentLuaIdoContract = getLuaIdoContract(web3, idoContractAddress)\r\n      const result = await currentLuaIdoContract.methods.increaseCap(index, amountIDO, amountPay).send(gasLimit)\r\n      toastSuccess('Deploy contract success')\r\n    } catch (error) {\r\n      toastError('Deploy contract fail')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Text fontSize=\"24px\" mt=\"14px\">\r\n        IncreaseCAP\r\n      </Text>\r\n      <Box mt=\"12px\">\r\n        <Flex mb=\"10px\">\r\n          <Text width=\"15%\">IDO address</Text>\r\n          <Input width=\"80%\" scale=\"md\" type=\"text\" {...register('idoContractAddress')} />\r\n        </Flex>\r\n        {inputList.map((input) => {\r\n          return (\r\n            <Flex mb=\"10px\">\r\n              <Text width=\"15%\">{input.name}</Text>\r\n              <Input width=\"80%\" scale=\"md\" type=\"text\" {...register(input.name)} />\r\n            </Flex>\r\n          )\r\n        })}\r\n      </Box>\r\n      <Button>Submit</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default IncreaseCap\r\n","import React from 'react'\r\nimport { Text, Box } from 'luastarter-uikits'\r\nimport Page from 'components/layout/Page'\r\nimport LuaswapAbi from 'config/abi/LuaSwapIDO.json'\r\nimport CreateForm from './components/DevTools/CreateForm'\r\nimport ReadForm from './components/DevTools/ReadForm'\r\nimport ApproveToken from './components/DevTools/ApproveToken'\r\nimport IncreaseCap from './components/DevTools/IncreaseCap'\r\n\r\nconst DevTools = () => {\r\n  return (\r\n    <Page>\r\n      <Box>\r\n        <ReadForm />\r\n        <br />\r\n        <ApproveToken />\r\n        <br />\r\n        <CreateForm abi={LuaswapAbi} />\r\n        <br />\r\n        <IncreaseCap abi={LuaswapAbi} />\r\n      </Box>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default DevTools\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nconst titleTierObj = {\r\n  none: 'None',\r\n  earth: 'Earth',\r\n  moon: 'Moon',\r\n  mars: 'Mars',\r\n  galaxy: 'Galaxy',\r\n  galaxyPlus: 'Galaxy plus',\r\n}\r\n\r\nconst useGetTitleOfTier = (estLua, isExclusive) => {\r\n  const [titleTier, setTitleTier] = useState(titleTierObj.none)\r\n\r\n  useEffect(() => {\r\n    if (estLua < 5000) {\r\n      setTitleTier(titleTierObj.none)\r\n    } else if (estLua >= 5000 && estLua < 25000) {\r\n      setTitleTier(titleTierObj.earth)\r\n    } else if (estLua >= 25000 && estLua < 100000) {\r\n      setTitleTier(titleTierObj.moon)\r\n    } else if (estLua >= 100000 && estLua < 250000) {\r\n      setTitleTier(titleTierObj.mars)\r\n    } else if (estLua >= 250000 && estLua < 400000) {\r\n      setTitleTier(titleTierObj.galaxy)\r\n    } else if (isExclusive) {\r\n      setTitleTier(titleTierObj.galaxyPlus)\r\n    } else {\r\n      setTitleTier(titleTierObj.galaxy)\r\n    }\r\n  }, [estLua, isExclusive])\r\n  return titleTier\r\n}\r\n\r\nexport default useGetTitleOfTier\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLuaIdoContract } from 'hooks/useContract'\r\nimport { depositIdo } from 'utils/callHelpers'\r\nimport { ZERO_ADDRESS } from 'config/constants/idos'\r\n\r\nconst useDepositIdo = (contractAddress: string, idoIndex: number, payTokenAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const luaIdoContract = useLuaIdoContract(contractAddress)\r\n  const isNativeToken = payTokenAddress === ZERO_ADDRESS\r\n\r\n  const handleDeposit = useCallback(\r\n    async (amount: string, proofS) => {\r\n      const txHash = await depositIdo(luaIdoContract, account, amount, idoIndex, isNativeToken, proofS)\r\n      console.info(txHash)\r\n    },\r\n    [account, luaIdoContract, idoIndex, isNativeToken],\r\n  )\r\n\r\n  return { onDeposit: handleDeposit }\r\n}\r\n\r\nexport default useDepositIdo\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { ZERO_ADDRESS } from 'config/constants/idos'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\nimport useEthBalance from './useEthBalance'\r\n\r\nexport const useTokenBalance = (tokenAddress: string, decimals = 18) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const userEthBalance = useEthBalance()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res).dividedBy(BIG_TEN.pow(decimals)))\r\n    }\r\n    if (tokenAddress === ZERO_ADDRESS) {\r\n      setBalance(new BigNumber(userEthBalance))\r\n    }\r\n\r\n    if (tokenAddress !== ZERO_ADDRESS && account && tokenAddress) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh, decimals, userEthBalance])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useState, useEffect } from 'react'\r\n\r\nconst useCurrentTime = () => {\r\n  const [currentMillis, setCurrentMillis] = useState(new Date().getTime())\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      setCurrentMillis((prevMillis) => prevMillis + 1000)\r\n    }\r\n\r\n    const timerID = setInterval(() => tick(), 1000)\r\n\r\n    return () => clearInterval(timerID)\r\n  }, [])\r\n\r\n  return currentMillis\r\n}\r\n\r\nexport default useCurrentTime\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLuaVestingContract } from 'hooks/useContract'\r\nimport { claimVesting } from 'utils/callHelpers'\r\n\r\nconst useClaimVesting = (contractAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const vestingContract = useLuaVestingContract(contractAddress)\r\n  const handleClaimVesting = useCallback(async () => {\r\n    const txHash = await claimVesting(vestingContract, account)\r\n  }, [account, vestingContract])\r\n\r\n  if (contractAddress) {\r\n    return { onClaimVesting: handleClaimVesting }\r\n  }\r\n  return {\r\n    onClaimVesting: () => {},\r\n  }\r\n}\r\n\r\nexport default useClaimVesting\r\n","import { useLuaVestingContract } from 'hooks/useContract'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport interface UserVestingInfoType {\r\n  amount: string\r\n  claimAtsTime: string\r\n  claimedAmount: string\r\n}\r\n\r\nexport interface VestingInfo {\r\n  userVestingInfo: UserVestingInfoType\r\n}\r\n\r\nconst DEFAULT_USERINFO = {\r\n  amount: '0',\r\n  claimAtsTime: null,\r\n  claimedAmount: '0',\r\n}\r\n\r\nconst formatVestingUserInfo = (userInfo: UserVestingInfoType = DEFAULT_USERINFO) => {\r\n  return {\r\n    amount: userInfo.amount,\r\n    claimAtsTime: userInfo.claimAtsTime,\r\n    claimedAmount: userInfo.claimedAmount,\r\n  }\r\n}\r\n\r\nconst useVestingInfo = (\r\n  vestingAddress: string,\r\n): {\r\n  vestingData: VestingInfo\r\n  estimateClaim: (time: any) => Promise<any>\r\n  refetchDataFromContract: () => any\r\n  isLoadingVestingInfo: boolean\r\n} => {\r\n  const { account } = useWeb3React()\r\n  // Force the hook to refetch\r\n  const [refetching, setRefetching] = useState(0)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [data, setData] = useState({\r\n    userVestingInfo: DEFAULT_USERINFO,\r\n  })\r\n  const web3 = useWeb3()\r\n  const vestingContract = useLuaVestingContract(vestingAddress)\r\n\r\n  const refetchDataFromContract = useCallback(() => {\r\n    setRefetching(refetching + 1)\r\n  }, [refetching])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const userVestingInfo = await vestingContract.methods.info(account).call()\r\n        const formatedVestingInfo = formatVestingUserInfo(userVestingInfo)\r\n        setData({\r\n          userVestingInfo: formatedVestingInfo,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.log(error, 'fail to fetch vesting info')\r\n      }\r\n    }\r\n\r\n    if (vestingAddress && vestingContract && account) {\r\n      fetchData()\r\n    }\r\n  }, [vestingContract, web3, account, refetching])\r\n\r\n  const estimateClaim = useCallback(\r\n    async (time) => {\r\n      try {\r\n        if (vestingContract) {\r\n          const estimatedClaim = await vestingContract.methods.estimateClaim(account, time).call()\r\n          return estimatedClaim\r\n        }\r\n        return () => {}\r\n      } catch (error) {\r\n        console.log(error, 'fail to fetch estimate claim')\r\n        return () => {}\r\n      }\r\n    },\r\n    [vestingContract, account],\r\n  )\r\n\r\n  return {\r\n    vestingData: data,\r\n    estimateClaim,\r\n    refetchDataFromContract,\r\n    isLoadingVestingInfo: isLoading,\r\n  }\r\n}\r\n\r\nexport default useVestingInfo\r\n","import { getUtcDateString } from 'utils/formatTime'\r\n\r\nconst generateClaimInfo = (claimTime, claimPercent) => {\r\n  let result = ''\r\n\r\n  for (let i = 0; i < claimTime.length; i++) {\r\n    result += `- Claim (${i + 1}) ${claimPercent[i]}% at ${getUtcDateString(claimTime[i])} \\n`\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default generateClaimInfo\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLuaIdoContract } from 'hooks/useContract'\r\nimport { claimRewardIdo } from 'utils/callHelpers'\r\n\r\nconst useClaimRewardIdo = (contractAddress: string, idoIndex: number) => {\r\n  const { account } = useWeb3React()\r\n  const luaIdoContract = useLuaIdoContract(contractAddress)\r\n  const handleClaimReward = useCallback(\r\n    async (amount: string, proofS) => {\r\n      const txHash = await claimRewardIdo(luaIdoContract, account, amount, idoIndex, proofS)\r\n    },\r\n    [account, luaIdoContract, idoIndex],\r\n  )\r\n\r\n  return { onClaimReward: handleClaimReward }\r\n}\r\n\r\nexport default useClaimRewardIdo\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nexport interface TimePeriodType {\r\n  hours: number\r\n  minutes: number\r\n  seconds: number\r\n}\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number): TimePeriodType => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React, { ReactNode } from 'react'\r\nimport { Button } from 'luastarter-uikits'\r\n\r\ninterface CommitButtonProps {\r\n  onClick(): any\r\n  symbol: string\r\n  disabled: boolean\r\n  isLoading: boolean\r\n  endIcon: ReactNode\r\n}\r\n\r\nconst CommitButton: React.FC<CommitButtonProps> = ({ onClick, symbol, disabled, ...props }) => {\r\n  return (\r\n    <Button mb=\"15px\" mt=\"15px\" width=\"100%\" variant=\"primary\" onClick={onClick} disabled={disabled} {...props}>\r\n      Commit your {symbol}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CommitButton\r\n","import React, { ReactNode } from 'react'\r\nimport { Button } from 'luastarter-uikits'\r\n\r\ninterface ClaimButtonProps {\r\n  onClick(): any\r\n  disabled: boolean\r\n  isLoading: boolean\r\n  endIcon: ReactNode\r\n}\r\n\r\nconst ClaimButton: React.FC<ClaimButtonProps> = ({ onClick, disabled, ...props }) => {\r\n  return (\r\n    <Button mb=\"15px\" mt=\"15px\" width=\"100%\" variant=\"primary\" onClick={onClick} disabled={disabled} {...props}>\r\n      Claim your reward\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n","import React, { ReactNode, useEffect, useMemo, useState } from 'react'\r\nimport { Button } from 'luastarter-uikits'\r\nimport { TimePeriodType } from 'utils/getTimePeriods'\r\nimport { UserVestingInfoType, VestingInfo } from 'views/Idos/hooks/useVestingInfo'\r\nimport useTimer from 'hooks/useTimer'\r\nimport { compareTwoTimestamp } from 'utils/formatTime'\r\n\r\ninterface VestingButtonProps {\r\n  onClick(): any\r\n  disabled: boolean\r\n  isLoading: boolean\r\n  endIcon: ReactNode\r\n  timeNextClaim: TimePeriodType\r\n  userVestingInfo: UserVestingInfoType\r\n  userClaimFirstPercent: boolean\r\n  idoReceivedAmount: string\r\n  claimSymbol: string\r\n  estimatedAmount: string\r\n  vestingData: VestingInfo\r\n  isClaimedAllVesting: boolean\r\n  timeVesting: string[]\r\n  percentVesting: string[]\r\n  isReject: boolean\r\n  userTotalCommitted: string\r\n}\r\n\r\nconst VestingButton: React.FC<VestingButtonProps> = ({\r\n  onClick,\r\n  timeNextClaim,\r\n  disabled,\r\n  userClaimFirstPercent,\r\n  userVestingInfo,\r\n  idoReceivedAmount,\r\n  claimSymbol,\r\n  vestingData,\r\n  estimatedAmount,\r\n  isClaimedAllVesting,\r\n  timeVesting,\r\n  percentVesting,\r\n  isReject,\r\n  userTotalCommitted,\r\n  ...props\r\n}) => {\r\n  const { claimAtsTime, claimedAmount } = userVestingInfo\r\n  const currentTimestamp = useTimer()\r\n\r\n  const isCurrentTimeOutOfClaimTimeFrame = useMemo(() => {\r\n    if (claimAtsTime) {\r\n      const lastTimeFrame = timeVesting[timeVesting.length - 1]\r\n      const result = compareTwoTimestamp(currentTimestamp, Number(lastTimeFrame))\r\n\r\n      return result\r\n    }\r\n\r\n    return false\r\n  }, [currentTimestamp, claimAtsTime, timeVesting])\r\n\r\n  const isDisableClaimOrRefundButton = useMemo(() => {\r\n    if (idoReceivedAmount === '0' && claimedAmount === '0' && userTotalCommitted === '0') {\r\n      return true\r\n    }\r\n    return false\r\n  }, [idoReceivedAmount, claimedAmount, userTotalCommitted])\r\n\r\n  const isDisabledButton = useMemo(() => {\r\n    if (estimatedAmount === '0' || !estimatedAmount) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [estimatedAmount])\r\n\r\n  // User not claim anything and current time is out of time frame\r\n  if (!userClaimFirstPercent && isCurrentTimeOutOfClaimTimeFrame) {\r\n    return (\r\n      <Button\r\n        mb=\"15px\"\r\n        mt=\"15px\"\r\n        width=\"100%\"\r\n        variant=\"primary\"\r\n        onClick={onClick}\r\n        {...props}\r\n        disabled={isDisableClaimOrRefundButton}\r\n      >\r\n        {isReject ? 'Refund' : 'Claim reward'}\r\n      </Button>\r\n    )\r\n  }\r\n  return (\r\n    <Button mb=\"15px\" mt=\"15px\" width=\"100%\" variant=\"primary\" onClick={onClick} disabled={isDisabledButton} {...props}>\r\n      {isDisabledButton\r\n        ? `${timeNextClaim.hours} hour(s) ${timeNextClaim.minutes} minute(s) ${timeNextClaim.seconds} second(s)`\r\n        : `Claim ${estimatedAmount} ${claimSymbol}`}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default VestingButton\r\n","import React, { LegacyRef, ReactElement, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, AutoRenewIcon } from 'luastarter-uikits'\r\nimport useToast from 'hooks/useToast'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { ZERO_ADDRESS } from 'config/constants/idos'\r\nimport { UserVestingInfoType, VestingInfo } from 'views/Idos/hooks/useVestingInfo'\r\nimport { compareTwoTimestamp } from 'utils/formatTime'\r\nimport { TimePeriodType } from 'utils/getTimePeriods'\r\nimport CommitButton from './CommitButton'\r\nimport ClaimButton from './ClaimButton'\r\nimport VestingButton from './VestingButton'\r\nimport { PoolStatus } from '../../types'\r\n\r\ninterface ActionButtonProps {\r\n  poolStatus: PoolStatus\r\n  isLoadingApproveStatus: boolean\r\n  onCommit(): any\r\n  onClaim(): any\r\n  onClaimVesting(): any\r\n  disabled: boolean\r\n  symbol: string\r\n  isRequestContractAction: boolean\r\n  isIdoAvailalbeOnChain: boolean\r\n  isUserDepositMinimumAmount: boolean\r\n  handleApprove(): any\r\n  isApproved: boolean\r\n  paytokenAddress: string\r\n  maxAmountAllowedLeft: string\r\n  depositAmount: string\r\n  isClaimed: boolean\r\n  minAmount: number\r\n  payTokenBalance: BigNumber\r\n  userTotalCommitted: string\r\n  isShowVesting: boolean\r\n  timeNextClaim: TimePeriodType\r\n  idoReceivedAmount: string\r\n  claimSymbol: string\r\n  vestingData: VestingInfo\r\n  estimatedAmount: string\r\n  isLoadingVestingInfo: boolean\r\n  isClaimedAllVesting: boolean\r\n  timeVesting: string[]\r\n  percentVesting: string[]\r\n  isReject: boolean\r\n}\r\n\r\nconst ActionButton: React.FC<ActionButtonProps> = ({\r\n  poolStatus,\r\n  onClaim,\r\n  onCommit,\r\n  symbol,\r\n  disabled,\r\n  isApproved,\r\n  handleApprove,\r\n  isRequestContractAction,\r\n  isUserDepositMinimumAmount,\r\n  paytokenAddress,\r\n  isIdoAvailalbeOnChain,\r\n  maxAmountAllowedLeft,\r\n  depositAmount,\r\n  isClaimed,\r\n  isLoadingApproveStatus,\r\n  minAmount,\r\n  payTokenBalance,\r\n  userTotalCommitted,\r\n  isShowVesting,\r\n  onClaimVesting,\r\n  idoReceivedAmount,\r\n  timeNextClaim,\r\n  claimSymbol,\r\n  vestingData,\r\n  estimatedAmount,\r\n  isLoadingVestingInfo,\r\n  isClaimedAllVesting,\r\n  timeVesting,\r\n  percentVesting,\r\n  isReject,\r\n}): ReactElement | null => {\r\n  const { account } = useWeb3React()\r\n  const { toastError } = useToast()\r\n  const isNativeToken = paytokenAddress === ZERO_ADDRESS\r\n  const { userVestingInfo } = vestingData\r\n  const { claimAtsTime } = userVestingInfo\r\n  const userClaimFirstPercent = useMemo(() => {\r\n    return claimAtsTime !== '0'\r\n  }, [claimAtsTime])\r\n\r\n  if (!account) {\r\n    return <UnlockButton />\r\n  }\r\n\r\n  if ((!isIdoAvailalbeOnChain || isClaimed || isLoadingApproveStatus) && !isShowVesting) {\r\n    return null\r\n  }\r\n\r\n  if (!isApproved && !isNativeToken && poolStatus !== 'closed') {\r\n    return (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        onClick={handleApprove}\r\n        isLoading={isRequestContractAction}\r\n        endIcon={isRequestContractAction && <AutoRenewIcon spin color=\"currentColor\" />}\r\n      >\r\n        Approve Contract{' '}\r\n      </Button>\r\n    )\r\n  }\r\n  if (poolStatus === 'closed') {\r\n    if (isShowVesting) {\r\n      if (isLoadingVestingInfo || isClaimedAllVesting) {\r\n        return null\r\n      }\r\n      return (\r\n        <VestingButton\r\n          vestingData={vestingData}\r\n          userVestingInfo={userVestingInfo}\r\n          timeVesting={timeVesting}\r\n          percentVesting={percentVesting}\r\n          estimatedAmount={estimatedAmount}\r\n          timeNextClaim={timeNextClaim}\r\n          userClaimFirstPercent={userClaimFirstPercent}\r\n          claimSymbol={claimSymbol}\r\n          idoReceivedAmount={idoReceivedAmount}\r\n          isClaimedAllVesting={isClaimedAllVesting}\r\n          onClick={() => {\r\n            // If user already claim 1 time we will call other functi\r\n            if (!userClaimFirstPercent) {\r\n              onClaim()\r\n            } else {\r\n              onClaimVesting()\r\n            }\r\n          }}\r\n          disabled={userClaimFirstPercent}\r\n          isLoading={isRequestContractAction}\r\n          isReject={isReject}\r\n          userTotalCommitted={userTotalCommitted}\r\n          endIcon={isRequestContractAction && <AutoRenewIcon spin color=\"currentColor\" />}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ClaimButton\r\n        onClick={onClaim}\r\n        disabled={disabled}\r\n        isLoading={isRequestContractAction}\r\n        endIcon={isRequestContractAction && <AutoRenewIcon spin color=\"currentColor\" />}\r\n      />\r\n    )\r\n  }\r\n\r\n  if (poolStatus === 'open') {\r\n    const isMaxAmountEqualZero = maxAmountAllowedLeft === '0'\r\n    let isDepositAmountTooLarge = false\r\n    let isDepositAmountTooSmall = false\r\n    let isDepositAmountLargerThanBalance = false\r\n    const isDepositAmountInvalid = !depositAmount || depositAmount === '0'\r\n\r\n    if (new BigNumber(depositAmount).comparedTo(maxAmountAllowedLeft) > 0) {\r\n      isDepositAmountTooLarge = true\r\n    }\r\n\r\n    if (new BigNumber(depositAmount).plus(new BigNumber(userTotalCommitted)).comparedTo(minAmount) < 0) {\r\n      isDepositAmountTooSmall = true\r\n    }\r\n\r\n    if (payTokenBalance.isZero() || new BigNumber(depositAmount).comparedTo(payTokenBalance) > 0) {\r\n      isDepositAmountLargerThanBalance = true\r\n    }\r\n    return (\r\n      <CommitButton\r\n        onClick={() => {\r\n          if (isDepositAmountLargerThanBalance) {\r\n            toastError('Committed amount is larger than your balance')\r\n            return\r\n          }\r\n          onCommit()\r\n        }}\r\n        symbol={symbol}\r\n        isLoading={isRequestContractAction}\r\n        endIcon={isRequestContractAction && <AutoRenewIcon spin color=\"currentColor\" />}\r\n        disabled={\r\n          isMaxAmountEqualZero ||\r\n          isDepositAmountTooLarge ||\r\n          isDepositAmountInvalid ||\r\n          !isUserDepositMinimumAmount ||\r\n          isDepositAmountTooSmall\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default ActionButton\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Contract } from 'web3-eth-contract'\r\n\r\n/**\r\n * Check if user approve to spend the pay token amount or not\r\n * If the pay token is native token - we can skip this step\r\n */\r\nconst useIsApproved = (tokenContract: Contract, spenderAddress: string): [a: boolean, b: () => any, c: boolean] => {\r\n  const [isApproved, setIsApproved] = useState(false)\r\n  const [isLoadingApproved, setIsLoadingApproved] = useState(true)\r\n  const { account } = useWeb3React()\r\n  const fetchAllowanceData = async () => {\r\n    try {\r\n      setIsLoadingApproved(true)\r\n      const allowance = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n      const bnAllowance = new BigNumber(allowance)\r\n      if (bnAllowance.isGreaterThan(0)) {\r\n        setIsApproved(true)\r\n        setIsLoadingApproved(false)\r\n        return null\r\n      }\r\n\r\n      setIsApproved(false)\r\n      setIsLoadingApproved(false)\r\n      return null\r\n    } catch (error) {\r\n      setIsApproved(false)\r\n      setIsLoadingApproved(false)\r\n      console.log(error, 'fail to fetch allowance info of user')\r\n      return null\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (tokenContract && account) {\r\n      fetchAllowanceData()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account, spenderAddress])\r\n\r\n  return [isApproved, fetchAllowanceData, isLoadingApproved]\r\n}\r\n\r\nexport default useIsApproved\r\n","import BigNumber from 'bignumber.js'\r\nimport { ChainId, IdoDetailInfo } from 'views/Idos/types'\r\nimport lodashFind from 'lodash/find'\r\nimport lodashGet from 'lodash/get'\r\nimport { supportIdoNetwork, tierMap } from 'config/constants/idos'\r\n\r\nexport const calculateSwapRate = (totalAmountIDO: string | number, totalAmountPay: string | number): string => {\r\n  if (totalAmountIDO && totalAmountPay) {\r\n    return new BigNumber(new BigNumber(totalAmountIDO).dividedBy(new BigNumber(totalAmountPay)).toFixed(6)).toString()\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const calculateCommittedAmountPercentage = (\r\n  totalCommittedAmount: string | number,\r\n  totalAmountPay: string | number,\r\n): number => {\r\n  if (totalCommittedAmount && totalAmountPay) {\r\n    const result = new BigNumber(totalCommittedAmount)\r\n      .dividedBy(new BigNumber(totalAmountPay))\r\n      .multipliedBy(100)\r\n      .toNumber()\r\n\r\n    if (result) {\r\n      return result\r\n    }\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nexport const calculateSwappedAmountPercentage = (\r\n  swappedAmountPay: string | number,\r\n  totalAmountIDO: string | number,\r\n): number => {\r\n  if (swappedAmountPay && totalAmountIDO) {\r\n    const result = new BigNumber(swappedAmountPay).dividedBy(new BigNumber(totalAmountIDO)).multipliedBy(100).toNumber()\r\n\r\n    if (result) {\r\n      return result\r\n    }\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nexport const getTierName = (tier: number) => {\r\n  return tierMap[tier]\r\n}\r\n\r\nexport const getIdoSupportedNetwork = (idos: Record<string, IdoDetailInfo[]>): string => {\r\n  try {\r\n    const supportedChainId = Object.keys(idos)\r\n    const supportedNetworkName = supportedChainId.map((chainId) => supportIdoNetwork[chainId])\r\n    return supportedNetworkName.join(',')\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nconst DEFAULT_IDO = {\r\n  tier: 0,\r\n  addressIdoContract: '',\r\n  creator: '',\r\n  idoToken: {\r\n    address: '',\r\n    symbol: null,\r\n    decimals: null,\r\n  },\r\n  payToken: {\r\n    address: '',\r\n    symbol: null,\r\n    decimals: null,\r\n  },\r\n  totalAmountIDO: '0',\r\n  totalAmountPay: '0',\r\n  maxAmountPay: 0,\r\n  minAmountPay: 0,\r\n  projectId: '',\r\n  claimAt: 0,\r\n  closeAt: 0,\r\n  openAt: 0,\r\n  swappedAmountIDO: '0',\r\n  swappedAmountPay: '0',\r\n  totalCommittedAmount: '0',\r\n  index: 0,\r\n  chainId: '',\r\n  vestingContract: '',\r\n}\r\n\r\nexport const getIdoDataBasedOnChainIdAndTier = (\r\n  index: Record<number, IdoDetailInfo[]>,\r\n  chainId: number,\r\n  userTier: number,\r\n): IdoDetailInfo => {\r\n  const allIdos = lodashGet(index, chainId, [])\r\n  if (allIdos.length === 0) {\r\n    return DEFAULT_IDO\r\n  }\r\n\r\n  const result = lodashFind(allIdos, (ido) => ido.tier === userTier)\r\n  if (result) return result\r\n\r\n  return DEFAULT_IDO\r\n}\r\n\r\nexport const mapProjectStatus = (status: string) => {\r\n  if (status === 'closed') {\r\n    return 'Closed'\r\n  }\r\n\r\n  if (status === 'not open') {\r\n    return 'In Preparation'\r\n  }\r\n\r\n  return 'Opening'\r\n}\r\n\r\nexport const generateColorForStatusBar = (status: string) => {\r\n  if (status === 'closed') {\r\n    return '#353535'\r\n  }\r\n\r\n  if (status === 'open') {\r\n    return '#7fbfaf'\r\n  }\r\n\r\n  return '#6bc1ff'\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, PocketWatchIcon, Text, Box } from 'luastarter-uikits'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst TimeBlock = styled(Flex)`\r\n  border-radius: 10px;\r\n  background-color: #1a1a1a;\r\n  display: flex;\r\n  width: 33%;\r\n  height: 100%;\r\n  margin-right: 4px;\r\n  padding: 5px;\r\n  flex-direction: column;\r\n`\r\n\r\nconst StyledText = styled(Text)`\r\n  @media screen and (max-width: 400px) {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  suffix: string\r\n  timeUntil: {\r\n    hours: number\r\n    minutes: number\r\n    seconds: number\r\n  }\r\n}\r\n\r\nconst Timer: React.FC<Props> = ({ suffix, timeUntil }) => {\r\n  const { t } = useTranslation()\r\n  const { hours, minutes, seconds } = timeUntil\r\n\r\n  return (\r\n    <Box\r\n      height=\"100%\"\r\n      width=\"100%\"\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      <Text mb=\"5px\" color=\"#8B8B8B\">\r\n        {suffix}\r\n      </Text>\r\n      <Flex flexDirection=\"row\" width=\"100%\">\r\n        <TimeBlock>\r\n          <Text color=\"#C3C3C3\" bold>\r\n            {hours}\r\n          </Text>\r\n          <Text color=\"#8B8B8B\">HOURS</Text>\r\n        </TimeBlock>\r\n        <TimeBlock>\r\n          <Text color=\"#C3C3C3\" bold>\r\n            {minutes}\r\n          </Text>\r\n          <Text color=\"#8B8B8B\">MINS</Text>\r\n        </TimeBlock>\r\n        <TimeBlock>\r\n          <Text color=\"#C3C3C3\" bold>\r\n            {seconds}\r\n          </Text>\r\n          <Text color=\"#8B8B8B\">SECS</Text>\r\n        </TimeBlock>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Text, Flex } from 'luastarter-uikits'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { getUtcDateString } from 'utils/formatTime'\r\nimport Timer from '../Timer'\r\nimport { PoolStatus } from '../../types'\r\n\r\nconst FlexWrapper = styled(Flex)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst DateBlock = styled(Box)`\r\n  border-top-left-radius: 50px;\r\n  padding: 24px 14px;\r\n  border-top-right-radius: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: calc(50% - 7px);\r\n  width: 100%;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin-bottom: 14px;\r\n  background: linear-gradient(107.27deg, #f5bd6d -12.7%, #d76700 122.45%);\r\n  position: relative;\r\n  @media screen and (max-width: 400px) {\r\n    height: 125px;\r\n  }\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 12px;\r\n    height: 12px;\r\n    position: absolute;\r\n    background-color: #1a1a1a;\r\n    bottom: 5px;\r\n    border-radius: 50%;\r\n    left: 30px;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 12px;\r\n    height: 12px;\r\n    position: absolute;\r\n    background-color: #1a1a1a;\r\n    bottom: 5px;\r\n    border-radius: 50%;\r\n    right: 30px;\r\n  }\r\n`\r\nconst TimerBlock = styled(Box)`\r\n  width: 100%;\r\n  height: calc(50% - 7px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n  background-color: #282828;\r\n  border-bottom-left-radius: 50px;\r\n  border-bottom-right-radius: 50px;\r\n  padding: 10px 15px;\r\n  position: relative;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    padding: 40px 15px;\r\n  }\r\n\r\n  @media screen and (max-width: 400px) {\r\n    height: 125px;\r\n  }\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 12px;\r\n    height: 12px;\r\n    position: absolute;\r\n    background-color: #1a1a1a;\r\n    top: 5px;\r\n    border-radius: 50%;\r\n    left: 30px;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 12px;\r\n    height: 12px;\r\n    position: absolute;\r\n    background-color: #1a1a1a;\r\n    top: 5px;\r\n    border-radius: 50%;\r\n    right: 30px;\r\n  }\r\n`\r\n\r\nconst ConnectDateTime = styled.div`\r\n  position: relative;\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 6px;\r\n    height: 40px;\r\n    background-color: #606060;\r\n    z-index: 1;\r\n    border-radius: 12px;\r\n    left: 33px;\r\n    top: -27px;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 6px;\r\n    height: 40px;\r\n    background-color: #606060;\r\n    z-index: 1;\r\n    border-radius: 12px;\r\n    right: 33px;\r\n    top: -27px;\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 20px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\ninterface CountDownProps {\r\n  openAtSeconds: number\r\n  closedAtSeconds: number\r\n  claimAtSeconds: number\r\n  openAt: number\r\n  closeAt: number\r\n  claimAt: number\r\n  poolStatus: PoolStatus\r\n}\r\n\r\nconst TimerOpen = ({ openAtSeconds }) => {\r\n  const timeUntilOpen = getTimePeriods(openAtSeconds)\r\n  return <Timer suffix=\"Open on\" timeUntil={timeUntilOpen} />\r\n}\r\n\r\nconst TimerClose = ({ closedAtSeconds }) => {\r\n  const timeUntilClosed = getTimePeriods(closedAtSeconds)\r\n  return <Timer suffix=\"Finish at\" timeUntil={timeUntilClosed} />\r\n}\r\n\r\nconst TimerClaim = ({ claimAtSeconds }) => {\r\n  const timeUntilClaim = getTimePeriods(claimAtSeconds)\r\n  return <Timer suffix=\"Claim at\" timeUntil={timeUntilClaim} />\r\n}\r\n\r\nconst TimerCountDown = ({ poolStatus, openAtSeconds, closedAtSeconds, claimAtSeconds }) => {\r\n  if (poolStatus === 'closed' || poolStatus === null) {\r\n    return (\r\n      <Timer\r\n        suffix=\"Claim time\"\r\n        timeUntil={{\r\n          minutes: 0,\r\n          seconds: 0,\r\n          hours: 0,\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  if (poolStatus === 'claim') {\r\n    return <TimerClaim claimAtSeconds={claimAtSeconds} />\r\n  }\r\n\r\n  if (poolStatus === 'not open' || poolStatus === 'preview') {\r\n    return <TimerOpen openAtSeconds={openAtSeconds} />\r\n  }\r\n\r\n  return <TimerClose closedAtSeconds={closedAtSeconds} />\r\n}\r\n\r\nconst CountDown: React.FC<CountDownProps> = ({\r\n  openAtSeconds,\r\n  closedAtSeconds,\r\n  claimAtSeconds,\r\n  openAt,\r\n  closeAt,\r\n  claimAt,\r\n  poolStatus,\r\n}) => {\r\n  const { title, date } = useMemo(() => {\r\n    if (poolStatus === 'not open' || poolStatus === 'preview') {\r\n      return {\r\n        title: 'Open on',\r\n        date: getUtcDateString(openAt),\r\n      }\r\n    }\r\n\r\n    if (poolStatus === 'open') {\r\n      return {\r\n        title: 'Close on',\r\n        date: getUtcDateString(closeAt),\r\n      }\r\n    }\r\n\r\n    if (poolStatus === 'claim') {\r\n      return {\r\n        title: 'Claim at',\r\n        date: getUtcDateString(claimAt),\r\n      }\r\n    }\r\n\r\n    return {\r\n      title: 'Closed',\r\n      date: '',\r\n    }\r\n  }, [poolStatus, openAt, closeAt, claimAt])\r\n\r\n  return (\r\n    <FlexWrapper flexDirection=\"column\">\r\n      <DateBlock>\r\n        <Text color=\"#FFFFFF\">{title}</Text>\r\n        <Title color=\"#FFFFFF\" bold>\r\n          {date}\r\n        </Title>\r\n      </DateBlock>\r\n      <ConnectDateTime />\r\n      <TimerBlock>\r\n        <TimerCountDown\r\n          openAtSeconds={openAtSeconds}\r\n          closedAtSeconds={closedAtSeconds}\r\n          claimAtSeconds={claimAtSeconds}\r\n          poolStatus={poolStatus}\r\n        />\r\n      </TimerBlock>\r\n    </FlexWrapper>\r\n  )\r\n}\r\n\r\nexport default CountDown\r\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Card, CardBody, Flex, Text, Mesage, Box, TertiaryMessage } from 'luastarter-uikits'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport axios from 'axios'\r\nimport styled from 'styled-components'\r\nimport fromUnixTime from 'date-fns/fromUnixTime'\r\nimport compareAsc from 'date-fns/compareAsc'\r\nimport get from 'lodash/get'\r\nimport useToast from 'hooks/useToast'\r\nimport useDepositIdo from 'hooks/useDepositIdo'\r\nimport { useApproveIdo } from 'hooks/useApproveIdo'\r\nimport { useTokenBalance } from 'hooks/useTokenBalance'\r\nimport useDeepMemo from 'hooks/useDeepMemo'\r\nimport useCurrentTime from 'hooks/useTimer'\r\nimport useClaimVesting from 'hooks/useClaimVesting'\r\nimport useVestingInfo from 'views/Idos/hooks/useVestingInfo'\r\nimport generateClaimInfo from 'views/Idos/utils/generateClaimInfo'\r\nimport { useSecondsUtilTimestamp } from 'views/Idos/hooks/useSecondsUntilCurrent'\r\nimport useClaimRewardIdo from 'hooks/useClaimRewardIdo'\r\nimport { useLuaVestingContract } from 'hooks/useContract'\r\nimport {\r\n  compareTwoTimestamp,\r\n  compareWithCurrentDateTime,\r\n  getUtcDateString,\r\n  timestampAndCurrentDifference,\r\n} from 'utils/formatTime'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { IdoDetailInfo, Pool } from 'views/Idos/types'\r\nimport { ZERO_ADDRESS } from 'config/constants/idos'\r\nimport { API_IDO_URL } from 'config'\r\nimport { getERC20Contract } from 'utils/contractHelpers'\r\nimport { getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useGetTitleOfTier from 'views/Idos/hooks/useGetTitleOfTier'\r\nimport ActionButton from './ActionButton'\r\nimport usePoolStatus from '../../hooks/usePoolStatus'\r\nimport useIsApproved from '../../hooks/useIsApproved'\r\nimport { calculateSwapRate, getTierName } from '../helper'\r\nimport CountDown from './CountDown'\r\n\r\nconst CardWrapper = styled(Card)`\r\n  width: calc(65% - 24px);\r\n  margin-right: 24px;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-right: 0px;\r\n    margin-bottom: 24px;\r\n  }\r\n`\r\ninterface ShowPoolDataProps {\r\n  isShowPoolData: boolean\r\n}\r\n\r\nconst InfoText = styled(Text)`\r\n  color: red;\r\n  font-size: 11px;\r\n`\r\n\r\nconst BlockTimerWrapper = styled(Box)<ShowPoolDataProps>`\r\n  width: ${(props) => (props.isShowPoolData ? '35%' : '100%')};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  @media (max-width: 1800px) {\r\n    width: ${(props) => (props.isShowPoolData ? '35%' : '100%')};\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-right: 0px;\r\n  }\r\n`\r\n\r\nconst FlexWrapper = styled(Flex)<ShowPoolDataProps>`\r\n  width: ${(props) => (props.isShowPoolData ? '45%' : '15%')};\r\n\r\n  @media (max-width: 1800px) {\r\n    margin-top: ${(props) => (props.isShowPoolData ? '24px' : '0px')};\r\n    width: ${(props) => (props.isShowPoolData ? '100%' : '15%')};\r\n  }\r\n\r\n  @media (max-width: 1500px) {\r\n    width: ${(props) => (props.isShowPoolData ? '100%' : '25%')};\r\n  }\r\n\r\n  @media (max-width: 800px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\ninterface DepositProps {\r\n  currentPoolData: Pool\r\n  tierDataOfUser: IdoDetailInfo\r\n  contractData: IdoDetailInfo\r\n  selectedUserTier: number\r\n  userTotalCommitted: string\r\n  totalAmountUserSwapped: string\r\n  isAvailalbeOnCurrentNetwork: boolean\r\n  isLoadingDataFromContract: boolean\r\n  isLoadingTierInfo: boolean\r\n  isShowPoolData: boolean\r\n  isShowTierInfor: boolean\r\n  titleTier: string\r\n}\r\n\r\nconst Deposit: React.FC<DepositProps> = ({\r\n  currentPoolData,\r\n  tierDataOfUser,\r\n  userTotalCommitted,\r\n  isAvailalbeOnCurrentNetwork,\r\n  totalAmountUserSwapped,\r\n  selectedUserTier,\r\n  isLoadingDataFromContract,\r\n  isLoadingTierInfo,\r\n  isShowPoolData,\r\n  isShowTierInfor,\r\n  titleTier,\r\n}) => {\r\n  const [value, setValue] = useState('0')\r\n  const [idoReceivedAmount, setIdoReceivedAmount] = useState('0')\r\n  const [currentTimeIndex, setCurrentTimeIndex] = useState(null)\r\n  const [isRequestContractAction, setIsRequestContractAction] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { account, library, chainId: cid } = useWeb3React()\r\n  const { vestingData, estimateClaim, refetchDataFromContract, isLoadingVestingInfo } = useVestingInfo(\r\n    tierDataOfUser.vestingContract,\r\n  )\r\n  const [estimatedAmount, setEstimatedAmount] = useState(null)\r\n  const { userVestingInfo } = vestingData\r\n  const { claimAtsTime, claimedAmount } = userVestingInfo\r\n  const [currentVestingPercentage, setCurrentVestingPercentage] = useState(0)\r\n  const luaVestingContract = useLuaVestingContract(tierDataOfUser.vestingContract)\r\n  const currentTimestamp = useCurrentTime()\r\n  const paytokenContract = getERC20Contract(library, tierDataOfUser.payToken.address, cid)\r\n  const [isApproved, fetchAllowanceData, isLoadingApproveStatus] = useIsApproved(\r\n    paytokenContract,\r\n    tierDataOfUser.addressIdoContract,\r\n  )\r\n  const isNativeToken = tierDataOfUser?.payToken?.address === ZERO_ADDRESS\r\n  const payTokenBalance = useTokenBalance(tierDataOfUser?.payToken?.address, tierDataOfUser?.payToken?.decimals)\r\n  const { onApprove } = useApproveIdo(paytokenContract, tierDataOfUser.addressIdoContract)\r\n  const { onDeposit } = useDepositIdo(\r\n    tierDataOfUser.addressIdoContract,\r\n    tierDataOfUser.index,\r\n    tierDataOfUser.payToken.address,\r\n  )\r\n  const { onClaimReward } = useClaimRewardIdo(tierDataOfUser.addressIdoContract, tierDataOfUser.index)\r\n  const { onClaimVesting } = useClaimVesting(tierDataOfUser.vestingContract)\r\n  // Data we receive from API\r\n  const { maxAmountPay, payToken, minAmountPay, idoToken, totalAmountIDO, totalAmountPay, index, projectId } =\r\n    tierDataOfUser\r\n  const {\r\n    openAt,\r\n    closeAt,\r\n    claimAt,\r\n    versionContract,\r\n    timeVesting,\r\n    percentVesting,\r\n    isVesting,\r\n    isReject,\r\n    isExclusive,\r\n    isPresent,\r\n  } = currentPoolData\r\n  const [poolStatus, openAtSeconds, closedAtSeconds, claimAtSeconds] = usePoolStatus(currentPoolData)\r\n\r\n  const maxAmountAllowedLeft = useMemo(() => {\r\n    return new BigNumber(maxAmountPay).minus(new BigNumber(userTotalCommitted)).toString()\r\n  }, [maxAmountPay, userTotalCommitted])\r\n\r\n  const isUserDepositMinimumAmount = useMemo(() => {\r\n    const flag = new BigNumber(userTotalCommitted).plus(new BigNumber(value)).comparedTo(new BigNumber(minAmountPay))\r\n    if (flag < 0) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }, [value, userTotalCommitted, minAmountPay])\r\n  const rate = useMemo(() => {\r\n    return calculateSwapRate(totalAmountIDO, totalAmountPay)\r\n  }, [totalAmountIDO, totalAmountPay])\r\n\r\n  const currentTimestampInSecond = useMemo(() => {\r\n    return Math.floor(currentTimestamp / 1000)\r\n  }, [currentTimestamp])\r\n\r\n  const isIdoAvailalbeOnChain = useDeepMemo(() => {\r\n    const { addressIdoContract } = tierDataOfUser\r\n\r\n    return !!addressIdoContract\r\n  }, [tierDataOfUser])\r\n\r\n  // Has vesting function or not\r\n  const isShowVesting = useMemo(() => {\r\n    if (versionContract === 1) {\r\n      return false\r\n    }\r\n    if (versionContract === 2 && isVesting) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [versionContract])\r\n  // Find the next time frame\r\n  const nextClaimTime = useMemo(() => {\r\n    if (versionContract === 1) {\r\n      return null\r\n    }\r\n    // We start to compare to each time in the claim time array\r\n    // If userClaimTime smaller than a timestamp in array we will get that timestamp and consider it as the next claim time\r\n    if (versionContract === 2 && isVesting) {\r\n      for (let i = 0; i < timeVesting.length; i++) {\r\n        const result = compareAsc(currentTimestampInSecond, Number(timeVesting[i]))\r\n        if (result === -1) {\r\n          setCurrentTimeIndex(i)\r\n          setCurrentVestingPercentage(\r\n            percentVesting.reduce((a, b, _index) => {\r\n              if (_index < i) {\r\n                return a + Number(b)\r\n              }\r\n\r\n              return a\r\n            }, 0),\r\n          )\r\n          return timeVesting[i]\r\n        }\r\n      }\r\n    }\r\n    return null\r\n  }, [timeVesting, percentVesting, currentTimestampInSecond, isVesting, versionContract])\r\n\r\n  const isClaimedAllVesting = useMemo(() => {\r\n    if (isShowVesting && claimedAmount && idoReceivedAmount && claimedAmount !== '0') {\r\n      if (getFullDisplayBalance(new BigNumber(claimedAmount), idoToken.decimals) === idoReceivedAmount) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }, [claimedAmount, idoReceivedAmount, idoToken, isShowVesting])\r\n  // If current time is larger than claim time frame\r\n  const isCurrentTimeOutOfClaimTimeFrame = useMemo(() => {\r\n    if (isShowVesting && timeVesting && timeVesting.length !== 0) {\r\n      const lastTimeFrame = timeVesting[timeVesting.length - 1]\r\n      const result = compareTwoTimestamp(currentTimestamp, Number(lastTimeFrame))\r\n\r\n      return result\r\n    }\r\n\r\n    return false\r\n  }, [currentTimestamp, timeVesting])\r\n\r\n  // Calculate the time until next claim\r\n  const secondsUntilNextClaim = useSecondsUtilTimestamp(nextClaimTime)\r\n  const timeNextClaim = useMemo(() => {\r\n    return getTimePeriods(secondsUntilNextClaim)\r\n  }, [secondsUntilNextClaim])\r\n  const handleSelectMax = useCallback(() => {\r\n    setValue(maxAmountAllowedLeft)\r\n  }, [maxAmountAllowedLeft])\r\n  const handleChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.validity.valid) {\r\n      setValue(e.currentTarget.value.replace(/,/g, '.'))\r\n    }\r\n  }, [])\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setIsRequestContractAction(true)\r\n      await onApprove()\r\n      fetchAllowanceData()\r\n      setIsRequestContractAction(false)\r\n    } catch (e) {\r\n      setIsRequestContractAction(false)\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, fetchAllowanceData])\r\n\r\n  const getClaimProof = useCallback(\r\n    async (poolId, poolIndex) => {\r\n      const response = await axios.get(\r\n        `${API_IDO_URL}/pools/claim-info/${poolId}/${cid}/${poolIndex}/${selectedUserTier}/${account}`,\r\n      )\r\n      return response.data\r\n    },\r\n    [account, cid, selectedUserTier],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const fetchReceiveIdoAmount = async () => {\r\n      try {\r\n        if (projectId) {\r\n          const claimProofData = await getClaimProof(projectId, index)\r\n          const receivedIdoAmount = new BigNumber(claimProofData.finalPay)\r\n            .multipliedBy(totalAmountIDO)\r\n            .dividedBy(totalAmountPay)\r\n          setIdoReceivedAmount(getFullDisplayBalance(receivedIdoAmount, claimProofData.payToken.decimals, 6))\r\n        }\r\n      } catch (error) {\r\n        setIdoReceivedAmount('0')\r\n        console.log(error)\r\n      }\r\n    }\r\n    // We only fetch the IDO token that user can claimed when pool status is closed and when we successfully load tier info after snapshot\r\n    if (poolStatus === 'closed' && !isLoadingTierInfo) {\r\n      fetchReceiveIdoAmount()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [poolStatus, getClaimProof, projectId, index, isLoadingTierInfo])\r\n\r\n  useEffect(() => {\r\n    const fetchEstimatedAmount = async () => {\r\n      try {\r\n        const res = await estimateClaim(currentTimestampInSecond)\r\n        if (res) {\r\n          setEstimatedAmount(getFullDisplayBalance(res, idoToken.decimals))\r\n        }\r\n      } catch (error) {\r\n        console.log(error, 'fail to fetch estimated amount')\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchEstimatedAmount()\r\n    }\r\n  }, [estimateClaim, currentTimestampInSecond, account, idoToken])\r\n\r\n  const getCommitProof = useCallback(\r\n    async (poolId, poolIndex, amount) => {\r\n      const response = await axios.get(\r\n        `${API_IDO_URL}/pools/proof-commit/${poolId}/${cid}/${poolIndex}/${selectedUserTier}/${account}/${amount}`,\r\n      )\r\n      return response.data\r\n    },\r\n    [account, cid, selectedUserTier],\r\n  )\r\n\r\n  const onHandleCommit = useCallback(async () => {\r\n    try {\r\n      setIsRequestContractAction(true)\r\n      const commitedAmmount = getDecimalAmount(new BigNumber(value), payToken.decimals).toString()\r\n      const response = await getCommitProof(projectId, index, commitedAmmount)\r\n      const { s, v, r, deadline } = response.proof\r\n      const proofS = [v, r, s, deadline]\r\n      await onDeposit(commitedAmmount, proofS)\r\n      toastSuccess('Successfully Deposited')\r\n      setValue('0')\r\n      setIsRequestContractAction(false)\r\n    } catch (error) {\r\n      setIsRequestContractAction(false)\r\n      toastError('Failed To deposit')\r\n    }\r\n  }, [onDeposit, value, toastError, toastSuccess, payToken.decimals, getCommitProof, index, projectId])\r\n\r\n  const onHandleClaim = useCallback(async () => {\r\n    try {\r\n      setIsRequestContractAction(true)\r\n      const response = await getClaimProof(projectId, index)\r\n      const { s, v, r, deadline } = response.proof\r\n      const { finalPay } = response\r\n      const formattedFinalPay = new BigNumber(finalPay).toString()\r\n      const proofS = [v, r, s, deadline]\r\n      await onClaimReward(formattedFinalPay, proofS)\r\n      setIsRequestContractAction(false)\r\n      toastSuccess('Reward Claimed Successfully')\r\n      // It will refetch vesting data from contract when user claim successfully\r\n      if (isShowVesting) {\r\n        refetchDataFromContract()\r\n      }\r\n    } catch (error) {\r\n      console.log(error, 'Fail to claim reward')\r\n      toastError('Failed to claim reward')\r\n      setIsRequestContractAction(false)\r\n    }\r\n  }, [onClaimReward, toastError, toastSuccess, projectId, index, getClaimProof, refetchDataFromContract, isShowVesting])\r\n\r\n  const onHandleClaimVesting = useCallback(async () => {\r\n    try {\r\n      setIsRequestContractAction(true)\r\n      await onClaimVesting()\r\n      setIsRequestContractAction(false)\r\n      toastSuccess('Reward Claimed Successfully')\r\n      // Reload data from contract when user claim\r\n      refetchDataFromContract()\r\n    } catch (error) {\r\n      toastError('Fail to claim reward')\r\n      setIsRequestContractAction(false)\r\n    }\r\n  }, [onClaimVesting, toastError, toastSuccess, refetchDataFromContract])\r\n\r\n  const isPoolInProgress = useMemo(() => {\r\n    if (poolStatus === 'open') {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [poolStatus])\r\n\r\n  const isClaimable = useMemo(() => {\r\n    const comparedNum = new BigNumber(userTotalCommitted).comparedTo(0)\r\n\r\n    if (comparedNum === 1) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [userTotalCommitted])\r\n  const isClaimed = useMemo(() => {\r\n    if (poolStatus === 'closed' && totalAmountUserSwapped !== '0' && userTotalCommitted === '0') {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [poolStatus, totalAmountUserSwapped, userTotalCommitted])\r\n  const minimumClaimableAmount = useMemo(() => {\r\n    if (minAmountPay && totalAmountPay && totalAmountIDO) {\r\n      const _minAmountPay = new BigNumber(minAmountPay)\r\n        .multipliedBy(new BigNumber(totalAmountIDO).dividedBy(new BigNumber(totalAmountPay)))\r\n        .toFixed(6)\r\n        .toString()\r\n      return new BigNumber(_minAmountPay).toString()\r\n    }\r\n\r\n    return 0\r\n  }, [minAmountPay, totalAmountIDO, totalAmountPay])\r\n  return (\r\n    <FlexWrapper flexDirection=\"row\" flexWrap=\"wrap\" isShowPoolData={isShowPoolData}>\r\n      {isExclusive && !idoToken.symbol && !isPresent ? null : (\r\n        <>\r\n          {isShowPoolData && (\r\n            <CardWrapper>\r\n              <CardBody\r\n                style={{\r\n                  height: '100%',\r\n                  ...(!isAvailalbeOnCurrentNetwork && {\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                  }),\r\n                }}\r\n              >\r\n                {isAvailalbeOnCurrentNetwork ? (\r\n                  <>\r\n                    {isShowTierInfor && (\r\n                      <Flex justifyContent=\"space-between\">\r\n                        <Text>Your Tier</Text>\r\n                        <Text bold>{titleTier}</Text>\r\n                      </Flex>\r\n                    )}\r\n                    {minAmountPay !== 0 && (\r\n                      <Flex justifyContent=\"space-between\">\r\n                        <Text>Min guaranteed</Text>\r\n                        <Text bold>\r\n                          {minimumClaimableAmount} {idoToken.symbol} = {minAmountPay} {payToken.symbol}\r\n                        </Text>\r\n                      </Flex>\r\n                    )}\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Text>Max to commit</Text>\r\n                      <Text bold>\r\n                        {isLoadingDataFromContract ? '~' : maxAmountPay} {payToken.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Text>Price</Text>\r\n                      <Text bold>\r\n                        1 {payToken.symbol} / {rate} {idoToken.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Text>Your committed</Text>\r\n                      <Text bold>\r\n                        {userTotalCommitted} {payToken.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    {isShowVesting ? (\r\n                      <>\r\n                        <Flex justifyContent=\"space-between\">\r\n                          <Text>Total claimable amount</Text>\r\n                          <Text bold>\r\n                            {poolStatus === 'claim' ? 'Processing' : idoReceivedAmount} {idoToken.symbol}\r\n                          </Text>\r\n                        </Flex>\r\n                        <Flex justifyContent=\"space-between\">\r\n                          <Text>Claimed amount</Text>\r\n                          <Text bold>\r\n                            {poolStatus === 'claim'\r\n                              ? 'Processing'\r\n                              : getFullDisplayBalance(new BigNumber(claimedAmount), idoToken.decimals, 6)}{' '}\r\n                            {idoToken.symbol}\r\n                          </Text>\r\n                        </Flex>\r\n                        <TertiaryMessage\r\n                          hoverContent={generateClaimInfo(timeVesting, percentVesting)}\r\n                          hoverPlacement=\"top\"\r\n                          color=\"#C3C3C3\"\r\n                        >\r\n                          Claim information\r\n                        </TertiaryMessage>\r\n                        {/* When user does not claim any thing even after the claim time frame */}\r\n                        {claimAtsTime === '0' && !isCurrentTimeOutOfClaimTimeFrame ? (\r\n                          <Mesage variant=\"warning\" mt=\"18px\">\r\n                            You will be able to claim: {poolStatus === 'claim' ? 'Processing' : idoReceivedAmount}{' '}\r\n                            {idoToken.symbol}\r\n                          </Mesage>\r\n                        ) : (\r\n                          nextClaimTime &&\r\n                          (poolStatus === 'claim' || poolStatus === 'closed') && (\r\n                            <Mesage variant=\"warning\" mt=\"18px\">\r\n                              The next vesting time: ({currentTimeIndex + 1}) {getUtcDateString(Number(nextClaimTime))}\r\n                            </Mesage>\r\n                          )\r\n                        )}\r\n\r\n                        {/* <Flex justifyContent=\"space-between\">\r\n                    <Text>Total claimed amount</Text>\r\n                    <Text bold>\r\n                      {poolStatus === 'claim'\r\n                        ? 'Processing'\r\n                        : new BigNumber(idoReceivedAmount)\r\n                            .multipliedBy(currentVestingPercentage)\r\n                            .dividedBy(100)\r\n                            .toString()}{' '}\r\n                      {idoToken.symbol}\r\n                    </Text>\r\n                  </Flex> */}\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        {(poolStatus === 'claim' || poolStatus === 'closed') && (\r\n                          <Flex justifyContent=\"space-between\">\r\n                            <Text>Claimable amount</Text>\r\n                            <Text bold>\r\n                              {poolStatus === 'claim' ? 'Processing' : idoReceivedAmount} {idoToken.symbol}\r\n                            </Text>\r\n                          </Flex>\r\n                        )}\r\n\r\n                        {(poolStatus === 'claim' || poolStatus === 'closed') && (\r\n                          <Flex justifyContent=\"space-between\">\r\n                            <Text>Claimed Amount</Text>\r\n                            <Text bold>\r\n                              {isClaimed ? idoReceivedAmount : 0} {idoToken.symbol}\r\n                            </Text>\r\n                          </Flex>\r\n                        )}\r\n                      </>\r\n                    )}\r\n\r\n                    {isIdoAvailalbeOnChain && (\r\n                      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"15px\">\r\n                        {account && isPoolInProgress && (isNativeToken || (!isNativeToken && isApproved)) && (\r\n                          <ModalInput\r\n                            value={value}\r\n                            onSelectMax={handleSelectMax}\r\n                            onChange={handleChange}\r\n                            isLoadingDataFromContract={isLoadingDataFromContract}\r\n                            max={maxAmountAllowedLeft}\r\n                            min={new BigNumber(minAmountPay).toString()}\r\n                            symbol={payToken.symbol}\r\n                            inputTitle=\"Amount\"\r\n                            secondaryTitle=\"Available Balance\"\r\n                            showWarning={false}\r\n                          />\r\n                        )}\r\n                      </Flex>\r\n                    )}\r\n                    {isReject && (\r\n                      <InfoText>\r\n                        (*) This IDO has been officially cancelled. Please click on Refund button to claim back your\r\n                        investment at TGE time.\r\n                      </InfoText>\r\n                    )}\r\n                    <ActionButton\r\n                      isRequestContractAction={isRequestContractAction}\r\n                      isUserDepositMinimumAmount={isUserDepositMinimumAmount}\r\n                      isApproved={isApproved}\r\n                      userTotalCommitted={userTotalCommitted}\r\n                      poolStatus={poolStatus}\r\n                      payTokenBalance={payTokenBalance}\r\n                      isLoadingApproveStatus={isLoadingApproveStatus}\r\n                      idoReceivedAmount={idoReceivedAmount}\r\n                      claimSymbol={idoToken.symbol}\r\n                      isIdoAvailalbeOnChain={isIdoAvailalbeOnChain}\r\n                      handleApprove={handleApprove}\r\n                      onCommit={onHandleCommit}\r\n                      onClaimVesting={onHandleClaimVesting}\r\n                      onClaim={onHandleClaim}\r\n                      disabled={!isClaimable}\r\n                      symbol={payToken.symbol}\r\n                      isClaimed={isClaimed}\r\n                      paytokenAddress={payToken.address}\r\n                      maxAmountAllowedLeft={maxAmountAllowedLeft}\r\n                      minAmount={minAmountPay}\r\n                      depositAmount={value}\r\n                      isShowVesting={isShowVesting}\r\n                      vestingData={vestingData}\r\n                      timeNextClaim={timeNextClaim}\r\n                      estimatedAmount={estimatedAmount}\r\n                      isLoadingVestingInfo={isLoadingVestingInfo}\r\n                      isClaimedAllVesting={isClaimedAllVesting}\r\n                      timeVesting={timeVesting}\r\n                      percentVesting={percentVesting}\r\n                      isReject={isReject}\r\n                    />\r\n                    {isClaimed && !isShowVesting && (\r\n                      <Mesage variant=\"warning\">You have claimed your reward, check your wallet balance</Mesage>\r\n                    )}\r\n                    {isClaimedAllVesting && isShowVesting && (\r\n                      <Mesage variant=\"warning\">You have claimed all your reward, check your wallet balance</Mesage>\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <img src={`${process.env.PUBLIC_URL}/images/empty.svg`} alt=\"empty\" />\r\n                    <Text color=\"#606060\" textAlign=\"center\">\r\n                      Switch to correct network to see pool&apos;s information\r\n                    </Text>\r\n                  </Flex>\r\n                )}\r\n              </CardBody>\r\n            </CardWrapper>\r\n          )}\r\n        </>\r\n      )}\r\n      <BlockTimerWrapper isShowPoolData={isShowPoolData}>\r\n        <CountDown\r\n          openAt={openAt}\r\n          closeAt={closeAt}\r\n          claimAt={claimAt}\r\n          openAtSeconds={openAtSeconds}\r\n          closedAtSeconds={closedAtSeconds}\r\n          poolStatus={poolStatus}\r\n          claimAtSeconds={claimAtSeconds}\r\n        />\r\n      </BlockTimerWrapper>\r\n    </FlexWrapper>\r\n  )\r\n}\r\n\r\nexport default Deposit\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { approveIdo } from 'utils/callHelpers'\r\n\r\n// Approve a Pay token if pay token is not native token\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const useApproveIdo = (paytokenContract: Contract, idoContractAddress: string) => {\r\n  const { account, chainId } = useWeb3React()\r\n  const web3 = useWeb3()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approveIdo(paytokenContract, idoContractAddress, account, chainId)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, paytokenContract, chainId, idoContractAddress])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n","import useDeepMemo from 'hooks/useDeepMemo'\r\nimport { formatPoolDetail } from 'utils/formatPoolData'\r\nimport { FormatPool, Pool } from '../types'\r\n\r\n/**\r\n * This hook calculate all tier pool's information\r\n */\r\nconst useTotalDataFromAllPools = (currentPoolData: Pool): FormatPool => {\r\n  const data = useDeepMemo<FormatPool>(() => {\r\n    const { img: _img, name: _name, description: _description, status: _status, index: _index = {} } = currentPoolData\r\n    const poolInfoChainId = Object.keys(_index).map((id) => {\r\n      return formatPoolDetail(_index[id])\r\n    })\r\n    const totalPoolData = formatPoolDetail(poolInfoChainId)\r\n    return {\r\n      img: _img,\r\n      name: _name,\r\n      description: _description,\r\n      status: _status,\r\n      ...totalPoolData,\r\n    }\r\n  }, [currentPoolData])\r\n\r\n  return data\r\n}\r\n\r\nexport default useTotalDataFromAllPools\r\n","import { format } from 'date-fns'\r\nimport { Flex, Text } from 'luastarter-uikits'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Pool } from 'views/Idos/types'\r\nimport styled from 'styled-components'\r\n\r\nconst DateStatusWrapper = styled(Flex)`\r\n  padding-left: 12px;\r\n  margin-left: 12px;\r\n  position: relative;\r\n\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 90%;\r\n    background-color: #606060;\r\n    top: 5%;\r\n    left: 0;\r\n  }\r\n`\r\n\r\ninterface PoolDateStatusProps {\r\n  currentPoolData: Pool\r\n}\r\n\r\nconst PoolDateStatus: React.FC<PoolDateStatusProps> = ({ currentPoolData }) => {\r\n  const { untilOpen, untilClose, untilClaim, openAt, closeAt, claimAt } = currentPoolData\r\n  const [dateStamp, setDateStamp] = useState(null)\r\n  const [dateValue, setDateValue] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (untilOpen) {\r\n      setDateStamp('Start date: ')\r\n      setDateValue(format(new Date(openAt * 1000), 'MM/dd/yyyy'))\r\n    } else if (untilClose) {\r\n      setDateStamp('End date: ')\r\n      setDateValue(format(new Date(closeAt * 1000), 'MM/dd/yyyy'))\r\n    } else if (untilClaim) {\r\n      setDateStamp('Claiming date: ')\r\n      setDateValue(format(new Date(claimAt * 1000), 'MM/dd/yyyy'))\r\n    }\r\n  }, [untilOpen, untilClose, untilClaim, openAt, closeAt, claimAt])\r\n\r\n  return (\r\n    <>\r\n      {dateStamp && (\r\n        <DateStatusWrapper>\r\n          <Text mr=\"5px\" color=\"#8B8B8B\">\r\n            {dateStamp}\r\n          </Text>\r\n          <Text color=\"#C3C3C3\">{dateValue}</Text>\r\n        </DateStatusWrapper>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolDateStatus\r\n","import React, { useMemo } from 'react'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  Link,\r\n  Text,\r\n  TwitterIcon,\r\n  MediumIcon,\r\n  WorldIcon,\r\n  TelegramIcon,\r\n  Progress,\r\n  Box,\r\n  TertiaryMessage,\r\n  SecondaryButton,\r\n  Button,\r\n  LinkExternal,\r\n} from 'luastarter-uikits'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport get from 'lodash/get'\r\nimport { IdoDetailInfo, Pool } from 'views/Idos/types'\r\nimport getLink from 'views/Idos/utils/getMediaUrl'\r\nimport { formatNumberWithComma } from 'utils/formatBalance'\r\nimport { supportIdoNetwork } from 'config/constants/idos'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  calculateCommittedAmountPercentage,\r\n  calculateSwappedAmountPercentage,\r\n  mapProjectStatus,\r\n  generateColorForStatusBar,\r\n} from '../helper'\r\nimport usePoolStatus from '../../hooks/usePoolStatus'\r\nimport useTotalDataFromAllPools from '../../hooks/useTotalDataFromAllPools'\r\nimport PoolDateStatus from './PoolDateStatus'\r\n\r\nconst IconWrapper = styled.a`\r\n  margin-right: ${(props) => (props['last-child'] === 'true' ? '0' : '14px')};\r\n  border-right: ${(props) => (props['last-child'] === 'true' ? 'none' : '1px solid #606060')};\r\n  padding-right: ${(props) => (props['last-child'] === 'true' ? '0' : '14px')};\r\n  cursor: pointer;\r\n`\r\nconst PoolInfoBlock = styled.div`\r\n  width: calc(80% - 10px);\r\n`\r\ninterface StatusBarProps {\r\n  status: string\r\n}\r\n\r\nconst StatusBar = styled(Box)<StatusBarProps>`\r\n  background-color: red;\r\n  border-radius: 50px;\r\n  padding: 8px 16px;\r\n  display: flex;\r\n  font-weight: 700;\r\n  display: inline-block;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  align-items: center;\r\n  color: #8b8b8b;\r\n  background-color: ${(props) => generateColorForStatusBar(props.status)};\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst ImageContainer = styled.img`\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  background-color: #e9e9e9;\r\n  margin-right: 10px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n`\r\nconst Title = styled(Text)`\r\n  font-size: 20px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst CapColumnWrapper = styled(Flex)`\r\n  width: 50%;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 25%;\r\n  }\r\n`\r\n\r\nconst SocialLinkWrapper = styled(Flex)`\r\n  width: 100%;\r\n  @media screen and (min-width: 768px) {\r\n    justify-content: flex-end;\r\n  }\r\n`\r\n\r\nconst PoolTag = styled(Flex)`\r\n  margin-top: 5px;\r\n  @media screen and (max-width: 768px) {\r\n    margin-bottom: 15px;\r\n  }\r\n`\r\n\r\nconst PoolWrapper = styled(Flex)`\r\n  width: 100%;\r\n  @media screen and (min-width: 768px) {\r\n    width: 70%;\r\n  }\r\n`\r\n\r\nconst AccessColumnWrapper = styled(Flex)`\r\n  width: 50%;\r\n  align-items: flex-end;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 15%;\r\n    align-items: flex-start;\r\n  }\r\n`\r\n\r\nconst ProcessColumnWrapper = styled(Flex)`\r\n  margin-top: 12px;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 0px;\r\n    width: 70%;\r\n  }\r\n`\r\nexport const YellowCard = styled(Box)`\r\n  box-sizing: border-box;\r\n  display: inline-block;\r\n  background-color: rgba(225, 169, 63, 0.3);\r\n  color: #fabc46;\r\n  font-weight: bold;\r\n  border-radius: 16px;\r\n  padding: 8px 16px;\r\n  transition: background-color 0.2s, opacity 0.2s;\r\n  font-size: 12px;\r\n  align-self: end;\r\n  text-align: center;\r\n`\r\n\r\nconst ProcessAmountWrapper = styled(Flex)`\r\n  flex-direction: column;\r\n  align-items: center;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    align-items: flex-start;\r\n  }\r\n`\r\nconst InfoText = styled(Text)`\r\n  color: red;\r\n  font-size: 11px;\r\n`\r\n\r\nconst CardWrapper = styled(Card)<CardWrapperProps>`\r\n  width: ${(props) => (props.isShowPoolData ? 'calc(55% - 24px)' : '85%')};\r\n  margin-right: 24px;\r\n\r\n  @media (max-width: 1800px) {\r\n    width: ${(props) => (props.isShowPoolData ? '100%' : 'calc(85% - 24px)')};\r\n    margin-right: ${(props) => (props.isShowPoolData ? '0px' : '24px')};\r\n  }\r\n\r\n  @media (max-width: 1500px) {\r\n    width: ${(props) => (props.isShowPoolData ? '100%' : 'calc(75% - 24px)')};\r\n  }\r\n\r\n  @media (max-width: 1100px) {\r\n    margin-right: ${(props) => (props.isShowPoolData ? '0px' : '24px')};\r\n  }\r\n\r\n  @media (max-width: 800px) {\r\n    width: 100%;\r\n    margin-right: 0px;\r\n    margin-bottom: ${(props) => (props.isShowPoolData ? '0px' : '24px')};\r\n  }\r\n`\r\n\r\nconst PoolInfoSocialBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: flex-start;\r\n`\r\n\r\nconst SecondaryButtonPool = styled(SecondaryButton)`\r\n  width: auto;\r\n  margin-bottom: 0;\r\n  height: 28px;\r\n  margin-left: 10px;\r\n`\r\n\r\nconst SecondaryButtonWhite = styled(SecondaryButtonPool)`\r\n  border-color: #fffcf6;\r\n`\r\n\r\nconst ExclusiveButton = styled(SecondaryButtonPool)`\r\n  border: none;\r\n  background-color: #606060;\r\n  padding: 8px 16px;\r\n  width: auto;\r\n`\r\n\r\ninterface CardWrapperProps {\r\n  isShowPoolData: boolean\r\n}\r\ninterface PoolSummaryProps {\r\n  currentPoolData: Pool\r\n  tierDataOfUser: IdoDetailInfo\r\n  contractData: IdoDetailInfo\r\n  isAvailalbeOnCurrentNetwork: boolean\r\n  isShowPoolData: boolean\r\n  isShowTierInfor: boolean\r\n}\r\n/**\r\n * In Pool summary component, we get live data from contract\r\n * and fixed data from API\r\n */\r\nconst PoolSummary: React.FC<PoolSummaryProps> = ({\r\n  currentPoolData,\r\n  tierDataOfUser,\r\n  contractData,\r\n  isShowPoolData,\r\n  isShowTierInfor,\r\n  isAvailalbeOnCurrentNetwork,\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const [poolStatus, openAtSeconds, closedAtSeconds, claimAtSeconds] = usePoolStatus(currentPoolData)\r\n  const { img, name, description, totalAmountIDO, payToken, idoToken } = useTotalDataFromAllPools(currentPoolData)\r\n  const { socials, timeVesting, percentVesting, versionContract, isVesting } = currentPoolData\r\n  const { whitelistLink, isWhitelist, isExclusive, isPresent } = currentPoolData\r\n  const { totalCommittedAmount, totalAmountPay, swappedAmountIDO } = contractData\r\n  const totalCommitedPercentage = useMemo(() => {\r\n    if (totalCommittedAmount && totalAmountPay) {\r\n      return calculateCommittedAmountPercentage(totalCommittedAmount, totalAmountPay)\r\n    }\r\n\r\n    return 0\r\n  }, [totalCommittedAmount, totalAmountPay])\r\n\r\n  const isShowVesting = useMemo(() => {\r\n    if (isVesting && versionContract === 2 && tierDataOfUser.vestingContract) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [isVesting, versionContract])\r\n\r\n  // const calculatedSwappedAmount = useMemo(() => {\r\n  //   if (isShowVesting) {\r\n\r\n  //   }\r\n\r\n  //   return swappedAmountIDO\r\n  // }, [swappedAmountIDO, isShowVesting])\r\n\r\n  const totalPayTokenCommited = useMemo(() => {\r\n    if (totalCommittedAmount !== null && swappedAmountIDO !== null) {\r\n      return new BigNumber(totalCommittedAmount).plus(new BigNumber(swappedAmountIDO)).toFixed(2)\r\n    }\r\n\r\n    return '0'\r\n  }, [totalCommittedAmount, swappedAmountIDO])\r\n  const totalSwapAmountPercentage = useMemo(() => {\r\n    if (swappedAmountIDO && totalAmountIDO) {\r\n      return calculateSwappedAmountPercentage(swappedAmountIDO, totalAmountIDO)\r\n    }\r\n\r\n    return 0\r\n  }, [swappedAmountIDO, totalAmountIDO])\r\n  // We will consider pool is open when pool still allows user to commit money and current time is < than claim time\r\n  const isPoolInProgress = useMemo(() => {\r\n    if (poolStatus === 'open' || (poolStatus === 'claim' && claimAtSeconds > 0)) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [poolStatus, claimAtSeconds])\r\n\r\n  const isPoolOpen = useMemo(() => {\r\n    if (poolStatus === 'not open') {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }, [poolStatus])\r\n  return (\r\n    <CardWrapper isShowPoolData={isShowPoolData}>\r\n      <CardBody\r\n        style={{\r\n          height: 'auto',\r\n        }}\r\n      >\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\">\r\n          <PoolWrapper mb=\"15px\" alignItems=\"center\" flex=\"1\">\r\n            <ImageContainer src={img} alt=\"img\" width=\"30%\" />\r\n            <PoolInfoBlock>\r\n              <Title bold>{name}</Title>\r\n              {isShowPoolData && (\r\n                <Flex alignItems=\"center\">\r\n                  <StatusBar status={poolStatus}>{mapProjectStatus(poolStatus)}</StatusBar>\r\n                  <PoolDateStatus currentPoolData={currentPoolData} />\r\n                </Flex>\r\n              )}\r\n            </PoolInfoBlock>\r\n          </PoolWrapper>\r\n          <PoolInfoSocialBlock>\r\n            <SocialLinkWrapper marginBottom=\"5px\" alignItems=\"center\">\r\n              <IconWrapper href={getLink(socials, 'TELEGRAM')} target=\"_blank\">\r\n                <TelegramIcon />\r\n              </IconWrapper>\r\n              <IconWrapper href={getLink(socials, 'TWITTER')} target=\"_blank\">\r\n                <TwitterIcon />\r\n              </IconWrapper>\r\n              <IconWrapper href={getLink(socials, 'MEDIUM')} target=\"_blank\">\r\n                <MediumIcon />\r\n              </IconWrapper>\r\n              <IconWrapper href={getLink(socials, 'FORUM')} target=\"_blank\" last-child=\"true\">\r\n                <WorldIcon />\r\n              </IconWrapper>\r\n            </SocialLinkWrapper>\r\n            <PoolTag>\r\n              {get(currentPoolData, 'network', []).map((network) => {\r\n                return <YellowCard key={network}>{network}</YellowCard>\r\n              })}\r\n              {isExclusive ? (\r\n                <ExclusiveButton scale=\"sm\" mb=\"15px\">\r\n                  <Text fontSize=\"10px\" color=\"#FABC46\" fontWeight=\"bold\">\r\n                    EXCLUSIVE POOL\r\n                  </Text>\r\n                </ExclusiveButton>\r\n              ) : (\r\n                <>\r\n                  {!isWhitelist ? (\r\n                    <SecondaryButtonPool scale=\"sm\" mb=\"15px\">\r\n                      <Text fontSize=\"10px\" color=\"#FABC46\" fontWeight=\"bold\">\r\n                        TIER MEMBER\r\n                      </Text>\r\n                    </SecondaryButtonPool>\r\n                  ) : (\r\n                    <SecondaryButtonWhite scale=\"sm\" mb=\"15px\">\r\n                      <Text fontSize=\"10px\" color=\"#FFFCF6\" fontWeight=\"bold\">\r\n                        WHITELIST MEMBER\r\n                      </Text>\r\n                    </SecondaryButtonWhite>\r\n                  )}\r\n                </>\r\n              )}\r\n            </PoolTag>\r\n          </PoolInfoSocialBlock>\r\n        </Flex>\r\n        <Text>{description}</Text>\r\n        {isShowPoolData && (\r\n          <Flex justifyContent=\"space-between\" mb=\"10px\" mt=\"15px\" alignItems=\"flex-start\" flexWrap=\"wrap\">\r\n            <CapColumnWrapper alignItems=\"flex-start\" flexDirection=\"column\">\r\n              <Text>Cap</Text>\r\n              <Text color=\"primary\" bold fontSize=\"18px\">\r\n                {formatNumberWithComma(totalAmountIDO, true)} {idoToken?.symbol}\r\n              </Text>\r\n            </CapColumnWrapper>\r\n            <ProcessColumnWrapper flexDirection=\"column\">\r\n              <Flex justifyContent=\"space-between\" mb=\"3px\">\r\n                <Box>\r\n                  {isPoolInProgress || !isPoolOpen ? (\r\n                    <ProcessAmountWrapper justifyContent=\"flex-start\">\r\n                      {isShowTierInfor ? (\r\n                        <TertiaryMessage\r\n                          hoverContent=\"You can still commit &amp; own a guaranteed share of the token IDO (except for tier None), regardless of the percentage shown.\"\r\n                          hoverPlacement=\"top\"\r\n                        >\r\n                          Commit Process\r\n                        </TertiaryMessage>\r\n                      ) : (\r\n                        <Text>Commit Process</Text>\r\n                      )}\r\n                      <Text color=\"primary\" bold fontSize=\"18px\">\r\n                        &nbsp;{formatNumberWithComma(totalCommittedAmount, true)}/\r\n                        {formatNumberWithComma(totalAmountPay, true)} {payToken?.symbol}\r\n                      </Text>\r\n                    </ProcessAmountWrapper>\r\n                  ) : (\r\n                    <ProcessAmountWrapper justifyContent=\"flex-start\">\r\n                      <Text>Swap Process</Text>\r\n                      <Text color=\"primary\" bold fontSize=\"18px\">\r\n                        &nbsp;{formatNumberWithComma(swappedAmountIDO, true)}/\r\n                        {formatNumberWithComma(totalAmountIDO, true)} {idoToken?.symbol}\r\n                      </Text>\r\n                    </ProcessAmountWrapper>\r\n                  )}\r\n                </Box>\r\n                <Text color=\"primary\" bold fontSize=\"18px\">\r\n                  {isPoolInProgress || !isPoolOpen\r\n                    ? totalCommitedPercentage.toFixed(2)\r\n                    : totalSwapAmountPercentage.toFixed(2)}\r\n                  %\r\n                </Text>\r\n              </Flex>\r\n              <Progress\r\n                key={poolStatus}\r\n                variant=\"round\"\r\n                scale=\"sm\"\r\n                primaryStep={(isPoolInProgress || !isPoolOpen) && totalCommitedPercentage}\r\n                secondaryStep={!isPoolInProgress && totalSwapAmountPercentage}\r\n              />\r\n            </ProcessColumnWrapper>\r\n          </Flex>\r\n        )}\r\n        {isShowPoolData && isShowTierInfor && !isExclusive && (\r\n          <InfoText>\r\n            (*) You can still commit &amp; own a guaranteed share of the token IDO (except for tier None), regardless of\r\n            the percentage shown.\r\n          </InfoText>\r\n        )}\r\n        {!isShowTierInfor && whitelistLink && (\r\n          <InfoText>\r\n            (*) Pool for WHITELIST WINNERS ONLY. If you are not on the&nbsp;\r\n            <a style={{ textDecoration: 'underline' }} href={whitelistLink} target=\"_blank\" rel=\"noreferrer\">\r\n              list\r\n            </a>\r\n            , you can NOT commit successfully.\r\n          </InfoText>\r\n        )}\r\n        {isShowPoolData && !account && (\r\n          <InfoText>\r\n            (*) Connect your wallet to LuaStarter at least 3 days before the IDO opens to complete your registration.\r\n          </InfoText>\r\n        )}\r\n        {isExclusive && !tierDataOfUser?.idoToken.symbol && !isPresent && (\r\n          <InfoText>\r\n            (*) NOT eligible for the exclusive pool, please upgrade to Tier Galaxy or Galaxy Plus to join!\r\n          </InfoText>\r\n        )}\r\n      </CardBody>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nexport default PoolSummary\r\n","import React from 'react'\r\nimport { Flex, Button, Text, Box, Link } from 'luastarter-uikits'\r\nimport uniqueId from 'lodash/uniqueId'\r\nimport styled from 'styled-components'\r\nimport { Pool } from 'views/Idos/types'\r\n\r\nconst ProjectInfoWrapper = styled(Box)`\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  margin-bottom: 0px;\r\n  padding: 24px;\r\n  background-color: #282828;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-right: 24px;\r\n    margin-bottom: 40px;\r\n  }\r\n`\r\n\r\nconst LinkWrapper = styled(Flex)`\r\n  border-bottom: 1px solid #353535;\r\n  padding-bottom: 14px;\r\n`\r\n\r\nconst LinkRef = styled(Flex)`\r\n  padding-left: 14px;\r\n  padding-right: 14px;\r\n  align-items: flex-start;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-right: none;\r\n  }\r\n\r\n  &:not(:last-of-type) {\r\n    border-right: 1px solid #353535;\r\n  }\r\n`\r\n\r\ninterface ProjectInfoProps {\r\n  currentPoolData: Pool\r\n}\r\n\r\nconst ProjectInfo: React.FC<ProjectInfoProps> = ({ currentPoolData }) => {\r\n  const { projectDetail, links } = currentPoolData\r\n  return (\r\n    <ProjectInfoWrapper>\r\n      <LinkWrapper flexWrap=\"wrap\">\r\n        {Array.isArray(links) &&\r\n          links.map((item, index) => {\r\n            return (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <LinkRef key={`${item.link}-${index}`}>\r\n                <Link\r\n                  href={item.link}\r\n                  target=\"_blank\"\r\n                  style={{\r\n                    wordBreak: 'break-all',\r\n                  }}\r\n                >\r\n                  {item.label}\r\n                </Link>\r\n              </LinkRef>\r\n            )\r\n          })}\r\n      </LinkWrapper>\r\n      <Text\r\n        mt=\"20px\"\r\n        style={{\r\n          whiteSpace: 'pre-line',\r\n        }}\r\n      >\r\n        {projectDetail}\r\n      </Text>\r\n    </ProjectInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default ProjectInfo\r\n","import React, { useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, CopyIcon, Text, Box, IconButton } from 'luastarter-uikits'\r\nimport styled from 'styled-components'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nimport useToast from 'hooks/useToast'\r\nimport { Pool } from 'views/Idos/types'\r\nimport { getUtcDateString } from 'utils/formatTime'\r\nimport { formatNumberWithComma } from 'utils/formatBalance'\r\nimport useTotalDataFromAllPools from '../../hooks/useTotalDataFromAllPools'\r\n\r\nconst ProjectInfoWrapper = styled(Box)`\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  padding: 24px;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  height: 450px;\r\n  background-color: #282828;\r\n  margin-bottom: 0px;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-right: 24px;\r\n    margin-bottom: 40px;\r\n  }\r\n`\r\n\r\ninterface PoolInfoProps {\r\n  currentPoolData: Pool\r\n}\r\n\r\nconst PoolInfo: React.FC<PoolInfoProps> = ({ currentPoolData }) => {\r\n  const { totalAmountIDO, openAt, closeAt, addressIdoContract, totalAmountPay, payToken } =\r\n    useTotalDataFromAllPools(currentPoolData)\r\n  const { toastSuccess } = useToast()\r\n\r\n  const calculatedPrice = useMemo(() => {\r\n    if (totalAmountIDO && totalAmountPay) {\r\n      return new BigNumber(new BigNumber(totalAmountPay).div(new BigNumber(totalAmountIDO)).toFixed(8)).toString()\r\n    }\r\n\r\n    return null\r\n  }, [totalAmountIDO, totalAmountPay])\r\n\r\n  return (\r\n    <ProjectInfoWrapper>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">Pool opens</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {getUtcDateString(openAt)}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">Pool closes</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {getUtcDateString(closeAt)}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">\r\n          Pool Address{' '}\r\n          <span>\r\n            <CopyToClipboard text={addressIdoContract} onCopy={() => toastSuccess('Copied')}>\r\n              <IconButton\r\n                variant=\"text\"\r\n                style={{\r\n                  height: 'auto',\r\n                  width: 'auto',\r\n                }}\r\n              >\r\n                <CopyIcon color=\"primary\" width=\"24px\" />\r\n              </IconButton>\r\n            </CopyToClipboard>\r\n          </span>{' '}\r\n        </Text>\r\n        <Text\r\n          color=\"#C3C3C3\"\r\n          bold\r\n          style={{\r\n            wordBreak: 'break-all',\r\n          }}\r\n        >\r\n          {addressIdoContract}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">Total to raise</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {formatNumberWithComma(totalAmountPay)} {payToken?.symbol}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\">\r\n        <Text color=\"#8B8B8B\">Price</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {calculatedPrice} {payToken?.symbol}\r\n        </Text>\r\n      </Flex>\r\n    </ProjectInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PoolInfo\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Text, Box, AddIcon, IconButton, CopyIcon, useTooltip } from 'luastarter-uikits'\r\nimport styled from 'styled-components'\r\nimport useToast from 'hooks/useToast'\r\nimport { Pool } from 'views/Idos/types'\r\nimport useTotalDataFromAllPools from '../../hooks/useTotalDataFromAllPools'\r\n\r\nconst TokenInfoWrapper = styled(Box)`\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  background-color: #282828;\r\n  height: 450px;\r\n  padding: 24px;\r\n  margin-bottom: 40px;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-right: 24px;\r\n  }\r\n`\r\nconst StyledButton = styled.button`\r\n  background: linear-gradient(to right, #f1b90c, #f0b90b);\r\n  border-radius: 15px;\r\n  font-size: 16px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #fff;\r\n  padding: 10px 0px;\r\n  color: #353535;\r\n  font-weight: 700;\r\n  box-shadow: 1px 0 2px #ff1baf5d;\r\n  border: none;\r\n  cursor: pointer;\r\n  &:active:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled) {\r\n    opacity: 0.85;\r\n    transform: translateY(1px);\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\ninterface TokenInfoProps {\r\n  currentPoolData: Pool\r\n}\r\n\r\nconst TokenInfo: React.FC<TokenInfoProps> = ({ currentPoolData }) => {\r\n  const { chainId } = useWeb3React()\r\n  const { index } = currentPoolData\r\n  const { name, idoToken = { address: '', symbol: '', decimals: '' }, img } = useTotalDataFromAllPools(currentPoolData)\r\n  const { address, symbol, decimals } = idoToken\r\n  const { toastSuccess, toastError } = useToast()\r\n  const idoChainId = useMemo(() => {\r\n    if (index) {\r\n      return Object.keys(index)\r\n    }\r\n\r\n    return []\r\n  }, [index])\r\n  // eslint-disable-next-line consistent-return\r\n  const onAddToken = useCallback(async () => {\r\n    if (idoChainId.filter((cid) => Number(cid) === chainId).length !== 0) {\r\n      const provider = (window as WindowChain).ethereum\r\n      if (provider) {\r\n        try {\r\n          await provider.request({\r\n            method: 'wallet_watchAsset',\r\n            params: {\r\n              type: 'ERC20',\r\n              options: {\r\n                address,\r\n                symbol,\r\n                decimals,\r\n                image: img,\r\n              },\r\n            },\r\n          })\r\n          return true\r\n        } catch (error) {\r\n          console.error(error)\r\n          return false\r\n        }\r\n      } else {\r\n        console.error(`Can't add token`)\r\n        return false\r\n      }\r\n    } else {\r\n      toastError('Wrong network')\r\n    }\r\n  }, [address, symbol, decimals, img, idoChainId, chainId, toastError])\r\n\r\n  return (\r\n    <TokenInfoWrapper>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">Name</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {name}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">Token symbol</Text>\r\n        <Text color=\"#C3C3C3\" bold>\r\n          {idoToken?.symbol}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" mb=\"10px\">\r\n        <Text color=\"#8B8B8B\">\r\n          Token Address{' '}\r\n          <span>\r\n            <CopyToClipboard text={idoToken?.address} onCopy={() => toastSuccess('Copied')}>\r\n              <IconButton\r\n                variant=\"text\"\r\n                style={{\r\n                  height: 'auto',\r\n                  width: 'auto',\r\n                }}\r\n              >\r\n                <CopyIcon color=\"primary\" width=\"24px\" />\r\n              </IconButton>\r\n            </CopyToClipboard>\r\n          </span>{' '}\r\n        </Text>\r\n        <Text\r\n          color=\"#C3C3C3\"\r\n          bold\r\n          style={{\r\n            wordBreak: 'break-all',\r\n          }}\r\n        >\r\n          {idoToken?.address}\r\n        </Text>\r\n      </Flex>\r\n      <StyledButton onClick={onAddToken}>\r\n        <AddIcon color=\"#353535\" mr=\"5px\" />\r\n        Add token\r\n      </StyledButton>\r\n    </TokenInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default TokenInfo\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'luastarter-uikits'\r\n\r\nexport interface ExpandableButton {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n  disabled?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div<{ disabled: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\r\n\r\n  svg {\r\n    fill: #fabc46;\r\n    opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\r\n  }\r\n`\r\n\r\nconst ExpandableButton: React.FC<ExpandableButton> = ({ onClick, expanded, disabled }) => {\r\n  return (\r\n    <Wrapper\r\n      aria-label=\"Hide or show expandable content\"\r\n      role=\"button\"\r\n      onClick={() => {\r\n        if (!disabled) {\r\n          onClick()\r\n        }\r\n      }}\r\n      disabled={disabled}\r\n    >\r\n      <Text\r\n        color=\"primary\"\r\n        bold\r\n        style={{\r\n          opacity: disabled ? 0.5 : 1,\r\n        }}\r\n      >\r\n        Higher Tier\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableButton\r\n","import React, { useState, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useSelector } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { selectUserNextTier } from 'state/profile'\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  Flex,\r\n  Image,\r\n  Button,\r\n  SecondaryMessage,\r\n  Box,\r\n  LinkExternal,\r\n  TertiaryMessage,\r\n} from 'luastarter-uikits'\r\nimport { formatPoolTotalTierByChainID } from 'utils/formatPoolData'\r\nimport { formatNumberWithComma } from 'utils/formatBalance'\r\nimport { IdoDetailInfo, Pool } from 'views/Idos/types'\r\nimport { TIER_HOVER_CONTENT } from 'config/constants/idos'\r\nimport { Tier } from 'state/types'\r\nimport ExpandableButtonComponent from '../ExpandableButton'\r\n\r\ninterface TierProps {\r\n  data: IdoDetailInfo\r\n  userTier: number\r\n  disabledBuyMore: boolean\r\n  nextTier: { [key: number]: Tier }\r\n}\r\n\r\nconst ExpandingWrapper = styled(Box)<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n  margin-top: 14px;\r\n`\r\n\r\nconst ImageContainer = styled.img`\r\n  width: 70px;\r\n  height: 70px;\r\n  border-radius: 50%;\r\n  margin-right: 14px;\r\n`\r\nconst Divider = styled.div`\r\n  background-color: #353535;\r\n  height: 2px;\r\n  margin: 14px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TierContainer = styled(Text)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 4px 10px;\r\n  background: #353535;\r\n  border-radius: 24px;\r\n  color: #8b8b8b;\r\n`\r\n\r\nconst TierHeaderWrapper = styled(Flex)``\r\n\r\nconst TierInformationWrapper = styled(Box)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  border-top-right-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  border-bottom-left-radius: 30px;\r\n  background-color: #282828;\r\n  padding: 24px;\r\n  margin-bottom: 40px;\r\n  width: 100%;\r\n`\r\n\r\nconst CardBodyWrapper = styled(CardBody)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst TierCardContainer = styled(Card)`\r\n  width: calc(25% - 20px);\r\n  margin-bottom: 15px;\r\n  background-color: #1a1a1a;\r\n\r\n  @media screen and (max-width: 1500px) {\r\n    width: calc(50% - 20px);\r\n    margin-right: 20px;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst TierCardWrapper = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n\r\n  @media screen and (max-width: 1500px) {\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nconst TIER_INFO = {\r\n  '1': {\r\n    name: 'Earth',\r\n    description: 'Tier requirement: 5,000 LUA',\r\n    icon: `${process.env.PUBLIC_URL}/images/earth.svg`,\r\n    CTA: (lua) => (lua ? `${lua} LUA to JOIN IDO` : `LUA to JOIN IDO`),\r\n    CTA2: (tomo) => (tomo ? `${tomo} TOMO to JOIN IDO` : `TOMO to JOIN IDO`),\r\n  },\r\n  '2': {\r\n    name: 'Moon',\r\n    description: 'Tier requirement: 25,000 LUA',\r\n    icon: `${process.env.PUBLIC_URL}/images/moon.svg`,\r\n    CTA: (lua) => (lua ? `${lua} LUA to reach tier 2` : `LUA to fly to the Moon`),\r\n    CTA2: (tomo) => (tomo ? `${tomo} TOMO to reach tier 2` : `TOMO to fly to the Moon`),\r\n  },\r\n  '3': {\r\n    name: 'Mars',\r\n    description: 'Tier requirement: 100,000 LUA',\r\n    icon: `${process.env.PUBLIC_URL}/images/mars.svg`,\r\n    CTA: (lua) => (lua ? `${lua} LUA to reach tier 3` : `LUA to fly to the Moon`),\r\n    CTA2: (tomo) => (tomo ? `${tomo} TOMO to reach tier 3` : `TOMO to fly to the Moon`),\r\n  },\r\n  '4': {\r\n    name: 'Galaxy',\r\n    description: 'Tier requirement: 250,000 LUA',\r\n    icon: `${process.env.PUBLIC_URL}/images/galaxy.svg`,\r\n    CTA: (lua) => (lua ? `${lua} LUA to reach tier 4` : `LUA to BREAK BORDER`),\r\n    CTA2: (tomo) => (tomo ? `${tomo} TOMO to reach tier 4` : `TOMO to fly to the Moon`),\r\n  },\r\n}\r\n\r\n// We have different layout for PC and Mobile/tablet\r\nconst TierCard: React.FC<TierProps> = ({\r\n  data: { tier, totalAmountIDO, totalAmountPay, totalCommittedAmount, idoToken = {}, payToken = {}, swappedAmountPay },\r\n  userTier,\r\n  nextTier,\r\n  disabledBuyMore,\r\n}) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const { chainId } = useWeb3React()\r\n  const addLiquidityUrl = useMemo(() => {\r\n    if (chainId === 88) {\r\n      return 'https://app.luaswap.org/#/add/0x7262fa193e9590B2E075c3C16170f3f2f32F5C74/TOMO'\r\n    }\r\n\r\n    if (chainId === 1) {\r\n      return 'https://app.luaswap.org/#/add/0x05D3606d5c81EB9b7B18530995eC9B29da05FaBa/0xB1f66997A5760428D3a87D68b90BfE0aE64121cC'\r\n    }\r\n\r\n    return 'https://app.luaswap.org/#/pool'\r\n  }, [chainId])\r\n  const calculatedPrice = useMemo(() => {\r\n    if (totalAmountIDO && totalAmountPay) {\r\n      return new BigNumber(totalAmountIDO).div(new BigNumber(totalAmountPay)).toFixed(6)\r\n    }\r\n\r\n    return null\r\n  }, [totalAmountIDO, totalAmountPay])\r\n\r\n  if (tier === 0) {\r\n    return null\r\n  }\r\n\r\n  const totalCommited = new BigNumber(totalCommittedAmount).plus(new BigNumber(swappedAmountPay)).toString()\r\n\r\n  return (\r\n    <TierCardContainer>\r\n      <CardBodyWrapper>\r\n        <Box>\r\n          <TierHeaderWrapper mb=\"15px\" flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" mb=\"14px\">\r\n              <ImageContainer src={TIER_INFO[tier]?.icon} alt=\"img\" />\r\n              <Flex alignItems=\"flex-start\" flexDirection=\"column\">\r\n                <Text fontSize=\"20px\" bold mr=\"8px\">\r\n                  {TIER_INFO[tier]?.name}\r\n                </Text>\r\n                <TierContainer fontSize=\"14px\" bold>\r\n                  Tier {tier}\r\n                </TierContainer>\r\n              </Flex>\r\n            </Flex>\r\n            <TertiaryMessage hoverContent={TIER_HOVER_CONTENT} hoverPlacement=\"top\" color=\"#8B8B8B\">\r\n              {TIER_INFO[tier]?.description}\r\n            </TertiaryMessage>\r\n          </TierHeaderWrapper>\r\n          <Flex justifyContent=\"space-between\" flexDirection=\"column\">\r\n            {/* <Flex justifyContent=\"space-between\">\r\n              <Text color=\"#8B8B8B\">Total {idoToken.symbol}&nbsp;</Text>\r\n              <Text bold color=\"#C3C3C3\">\r\n                {formatNumberWithComma(totalAmountIDO, true)} {idoToken.symbol}\r\n              </Text>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text color=\"#8B8B8B\">Total to raise</Text>\r\n              <Text bold color=\"#C3C3C3\">\r\n                {formatNumberWithComma(totalAmountPay, true)} {payToken.symbol}\r\n              </Text>\r\n            </Flex> */}\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text color=\"#8B8B8B\">Price</Text>\r\n              <Text bold>\r\n                {calculatedPrice} {idoToken.symbol}/{payToken.symbol}\r\n              </Text>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text color=\"#8B8B8B\">Total committed&nbsp;</Text>\r\n              <Text bold>\r\n                {formatNumberWithComma(totalCommited, true)} {payToken.symbol}\r\n              </Text>\r\n            </Flex>\r\n          </Flex>\r\n        </Box>\r\n        <Divider />\r\n        <Box>\r\n          {userTier === tier && (\r\n            <Button width=\"100%\" mt=\"4px\" disabled={userTier + 2 === tier}>\r\n              <Text bold color=\"#353535\">\r\n                Your Tier. GET READY!\r\n              </Text>\r\n              {/* <Image\r\n                src=\"https://image.flaticon.com/icons/png/512/1067/1067357.png\"\r\n                alt=\"img\"\r\n                width={40}\r\n                height={40}\r\n                ml=\"20px\"\r\n              /> */}\r\n            </Button>\r\n          )}\r\n          {userTier < tier && (\r\n            <>\r\n              <ExpandableButtonComponent\r\n                disabled={disabledBuyMore}\r\n                onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n                expanded={showExpandableSection}\r\n              />\r\n              <ExpandingWrapper expanded={showExpandableSection}>\r\n                <LinkExternal href=\"https://app.luaswap.org/#/swap\">Buy LUA or TOMO</LinkExternal>\r\n                <LinkExternal href=\"https://app.luaswap.org/#/lua-safe\">\r\n                  Then stake {nextTier[tier]?.addQuantityLua} LUA\r\n                </LinkExternal>\r\n                <LinkExternal href={addLiquidityUrl}>Or Add Liquidity</LinkExternal>\r\n              </ExpandingWrapper>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </CardBodyWrapper>\r\n    </TierCardContainer>\r\n  )\r\n}\r\n\r\nconst TierDetails: React.FC<{\r\n  currentPoolData: Pool\r\n  selectedUserTier: number\r\n  secondsUntilSnapshot: number\r\n}> = ({ currentPoolData, secondsUntilSnapshot, selectedUserTier }) => {\r\n  const userNextTier = useSelector(selectUserNextTier)\r\n  const { index: tierData = {} } = currentPoolData\r\n  const nextTier = userNextTier.reduce((s: { [key: number]: Tier }, e: Tier) => {\r\n    const tmps = s\r\n    tmps[e.tier] = e\r\n    return tmps\r\n  }, {})\r\n\r\n  const isPoolStarted = useMemo(() => {\r\n    if (secondsUntilSnapshot <= 0) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }, [secondsUntilSnapshot])\r\n\r\n  const tiersss: IdoDetailInfo[] = useMemo(() => {\r\n    if (Object.keys(tierData).length !== 0) {\r\n      const chainIds = Object.keys(tierData)\r\n      let result: IdoDetailInfo[] = tierData[chainIds[0]]\r\n      for (let i = 1; i < chainIds.length; i++) {\r\n        result = formatPoolTotalTierByChainID(result, tierData[chainIds[i]])\r\n      }\r\n      return result\r\n    }\r\n    return []\r\n  }, [tierData])\r\n  return (\r\n    <>\r\n      <TierInformationWrapper>\r\n        <TierCardWrapper>\r\n          {tiersss.map((e: IdoDetailInfo, i: number) => {\r\n            return (\r\n              <TierCard\r\n                data={e}\r\n                key={e.tier}\r\n                userTier={selectedUserTier}\r\n                nextTier={nextTier}\r\n                disabledBuyMore={isPoolStarted}\r\n              />\r\n            )\r\n          })}\r\n        </TierCardWrapper>\r\n      </TierInformationWrapper>\r\n      <Box mb=\"24px\">\r\n        <SecondaryMessage>\r\n          <Text color=\"#8B8B8B\">\r\n            If you are not qualified for any tiers, you may still be able to buy IDO tokens by committing funds.\r\n            <br />\r\n            But your allocation can not be guaranteed as priority will be given to tier members.\r\n          </Text>\r\n        </SecondaryMessage>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TierDetails\r\n","import Web3 from 'web3'\r\nimport { getWeb3NoAccount } from './web3'\r\n\r\n/**\r\n * Accepts an array of contract method calls and batches them\r\n *\r\n * Example:\r\n *\r\n * [\r\n *  contract.method.balanceOf().call,\r\n *  contract.method.startBlockNumber().call\r\n * ]\r\n */\r\nconst makeBatchRequest = (calls: any[], web3?: Web3): Promise<any[]> => {\r\n  try {\r\n    const web3Instance = web3 || getWeb3NoAccount()\r\n    const batch = new web3Instance.BatchRequest()\r\n\r\n    const promises = calls.map((call) => {\r\n      return new Promise((resolve, reject) => {\r\n        batch.add(\r\n          call.request({}, (err, result) => {\r\n            if (err) {\r\n              reject(err)\r\n            } else {\r\n              resolve(result)\r\n            }\r\n          }),\r\n        )\r\n      })\r\n    })\r\n\r\n    batch.execute()\r\n\r\n    return Promise.all(promises)\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default makeBatchRequest\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLuaIdoContract } from 'hooks/useContract'\r\nimport { mappingIdoResponse } from 'state/ido/fetchIdosData'\r\nimport { IdoDetail } from 'state/types'\r\nimport get from 'lodash/get'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { formatIdoContract } from 'utils/formatPoolData'\r\nimport { getWeb3BasedOnChainId } from 'utils/web3'\r\nimport { getLuaIdoContract } from 'utils/contractHelpers'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { useBlock } from 'state/hooks'\r\nimport { IdoDetailInfo } from '../types'\r\n\r\nconst defaultIdoDetail = {\r\n  claimAt: null,\r\n  closeAt: null,\r\n  creator: null,\r\n  idoToken: null,\r\n  maxAmountPay: null,\r\n  minAmountPay: null,\r\n  openAt: null,\r\n  payToken: null,\r\n  swappedAmountIDO: null,\r\n  swappedAmountPay: null,\r\n  totalAmountIDO: null,\r\n  totalAmountPay: null,\r\n  totalCommittedAmount: null,\r\n}\r\n\r\n/**\r\n * This hook fetch live data from contract IDO based on current blocknumber\r\n * @param contractAddress Ido contract address\r\n * @param idoIndex Index of the current IDO in contract (based on chain id and user tier)\r\n * @param idoIndexes List of idos for each chain id in this IDO\r\n * @param verionContract Version of current contract\r\n * @returns Data of the current IDO on contract and amount of committed token of current User\r\n */\r\nconst useDataFromIdoContract = (\r\n  contractAddress: string,\r\n  idoIndex: number,\r\n  idoIndexes: Record<string, IdoDetailInfo[]>,\r\n  verionContract: number,\r\n): [\r\n  idoData: IdoDetail,\r\n  commitedAmount: string,\r\n  totalAmountUserSwapped: string,\r\n  isLoading: boolean,\r\n  luaVestingAddress: string,\r\n] => {\r\n  const { account, chainId } = useWeb3React()\r\n  // Current Lua Ido contract based on log in chainid\r\n  const luaIdoContract = useLuaIdoContract(contractAddress)\r\n  const [luaVestingAddress, setLuaVestingAddress] = useState(null)\r\n  const [idoDetail, setIdoDetail] = useState<IdoDetail>(defaultIdoDetail)\r\n  const [totalUserCommitted, setTotalUserCommitted] = useState<string>('0')\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const [totalAmountUserSwapped, setTotalAmountUserSwapped] = useState<string>('0')\r\n  const { currentBlock } = useBlock()\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const idosOfEachChainId = {}\r\n      const idoIndexMap = {}\r\n      const tokenMap = {}\r\n      try {\r\n        /**\r\n         * We loop through every index and get all idos info in each index\r\n         * @returns {\r\n         *  Chainid: []Promise<Idos>\r\n         * }\r\n         */\r\n        Object.keys(idoIndexes).forEach((idoChainId) => {\r\n          const idosOfCurrentChainId = []\r\n          idoIndexes[idoChainId].forEach((ido) => {\r\n            if (!idoIndexMap[ido.index] && ido.tier !== 0) {\r\n              // We will get new contract based on addressIdoContract received from API\r\n              const luaContractAddress = ido.addressIdoContract\r\n              const web3 = getWeb3BasedOnChainId(Number(idoChainId))\r\n              const currentLuaIdoContract = getLuaIdoContract(web3, luaContractAddress)\r\n              const contractIdoDetail = currentLuaIdoContract.methods.IDOs(ido.index).call\r\n              idosOfCurrentChainId.push(contractIdoDetail)\r\n              tokenMap[ido.index] = {}\r\n              tokenMap[ido.index].idoToken = ido.idoToken\r\n              tokenMap[ido.index].payToken = ido.payToken\r\n              idoIndexMap[ido.index] = true\r\n            }\r\n\r\n            if (ido.tier === 0) {\r\n              tokenMap[ido.index] = {}\r\n              tokenMap[ido.index].idoToken = ido.idoToken\r\n              tokenMap[ido.index].payToken = ido.payToken\r\n            }\r\n          })\r\n          idosOfEachChainId[idoChainId] = idosOfCurrentChainId\r\n        })\r\n        /**\r\n         * We map through all the idos in each chain id and use web3 provider of that chainid to fetch data\r\n         * from IDO contract\r\n         * @param chainids - Array of all available chain ids for this project\r\n         * @returns Total data of all chain ids for this project\r\n         */\r\n        const processMultipleChainid = async (chainids) => {\r\n          const generatedResponse = []\r\n          await Promise.all(\r\n            chainids.map(async (cid) => {\r\n              try {\r\n                const web3 = getWeb3BasedOnChainId(Number(cid))\r\n                // idos here is all idos of a single chain id\r\n                const idos = idosOfEachChainId[cid]\r\n                const dataList = await makeBatchRequest(idos, web3)\r\n                const mappedContractIdoList = dataList.map((ido) => mappingIdoResponse(ido))\r\n                const allTiersDataFromContract = formatIdoContract(mappedContractIdoList)\r\n                generatedResponse.push(allTiersDataFromContract)\r\n              } catch (error) {\r\n                console.log(error)\r\n              }\r\n            }),\r\n          )\r\n          return generatedResponse\r\n        }\r\n        const chainIdsIdos = await processMultipleChainid(Object.keys(idosOfEachChainId))\r\n        const allTiersDataFromContract = formatIdoContract(chainIdsIdos)\r\n        setIdoDetail(allTiersDataFromContract)\r\n        /**\r\n         * Get total committed amount of current user\r\n         */\r\n        const commitedAmount = await luaIdoContract.methods.userCommitedAmount(account, idoIndex).call()\r\n        const swappedIdoAmount = await luaIdoContract.methods.userSwappedAmountIDO(account, idoIndex).call()\r\n        setTotalUserCommitted(\r\n          getBalanceAmount(commitedAmount, get(tokenMap, `${idoIndex}.payToken.decimals`, null)).toString(),\r\n        )\r\n        setTotalAmountUserSwapped(\r\n          getBalanceAmount(swappedIdoAmount, get(tokenMap, `${idoIndex}.idoToken.decimals`, null)).toString(),\r\n        )\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.log(error, 'error to fetch data from contract')\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentBlock, chainId])\r\n\r\n  useEffect(() => {\r\n    const fetchVestingInfo = async () => {\r\n      try {\r\n        const vestingContract = await luaIdoContract.methods.vesting().call()\r\n        setLuaVestingAddress(vestingContract)\r\n      } catch (error) {\r\n        console.log(error, 'fail to get vesting contract')\r\n      }\r\n    }\r\n    // Only fetch vesting information when version contract = 2\r\n    if (verionContract === 2) {\r\n      fetchVestingInfo()\r\n    }\r\n  }, [luaIdoContract, contractAddress, verionContract])\r\n\r\n  return [idoDetail, totalUserCommitted, totalAmountUserSwapped, isLoading, luaVestingAddress]\r\n}\r\n\r\nexport default useDataFromIdoContract\r\n","import { useEffect } from 'react'\r\nimport useDeepMemo from 'hooks/useDeepMemo'\r\nimport { formatPoolDetail } from 'utils/formatPoolData'\r\nimport { IdoDetailInfo, Pool } from '../types'\r\n\r\n/**\r\n * This hook calculate all tier pool's information\r\n */\r\nconst useTotalDataFromApi = (currentPoolData: Pool) => {\r\n  const data = useDeepMemo<IdoDetailInfo>(() => {\r\n    const { index: _index = {} } = currentPoolData\r\n    const poolInfoChainId = Object.keys(_index).map((id) => {\r\n      return formatPoolDetail(_index[id])\r\n    })\r\n    const totalPoolData = formatPoolDetail(poolInfoChainId)\r\n    return {\r\n      ...totalPoolData,\r\n    }\r\n  }, [currentPoolData])\r\n\r\n  return data\r\n}\r\n\r\nexport default useTotalDataFromApi\r\n","import React, { useEffect, useState, useMemo } from 'react'\r\nimport { Flex, Heading, Mesage, Text, Box } from 'luastarter-uikits'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Page from 'components/layout/Page'\r\nimport PageLoader from 'components/PageLoader'\r\nimport useDeepMemo from 'hooks/useDeepMemo'\r\nimport { fetchPool, selectCurrentPool, selectLoadingCurrentPool, setDefaultCurrentPool } from 'state/ido'\r\nimport { selectUserEstLua, selectUserTier } from 'state/profile'\r\nimport { getTierDataAfterSnapshot } from 'state/profile/getProfile'\r\nimport { useBlock } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport get from 'lodash/get'\r\nimport useSecondsUntilCurrent from 'views/Idos/hooks/useSecondsUntilCurrent'\r\n\r\nimport useGetTitleOfTier from 'views/Idos/hooks/useGetTitleOfTier'\r\nimport isNaN from 'lodash/isNaN'\r\nimport Steps from './Steps'\r\nimport Deposit from './Deposit'\r\nimport PoolSummary from './PoolSummary'\r\nimport ProjectInfo from './ProjectInfo'\r\nimport PoolInfo from './PoolInfo'\r\nimport TokenInfo from './TokenInfo'\r\nimport TierDetails from './TierDetails'\r\nimport useDataFromIdoContract from '../../hooks/useDataFromIdoContract'\r\nimport useTotalDataFromApi from '../../hooks/useTotalDataFromApi'\r\nimport { generateColorForStatusBar, getIdoDataBasedOnChainIdAndTier, getIdoSupportedNetwork } from '../helper'\r\n\r\ninterface PropjectDetailProps {\r\n  isShowPoolData: boolean\r\n}\r\n\r\nconst Row = styled.div`\r\n  max-width: 1600px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width: 500px) {\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n  } ;\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  @media screen and (min-width: 1800px) {\r\n    flex-wrap: nowrap;\r\n  }\r\n`\r\n\r\nconst ProjectDetailBox = styled(Box)<PropjectDetailProps>`\r\n  width: ${(props) => (props.isShowPoolData ? 'calc(50% - 48px)' : '100%')};\r\n  margin-right: ${(props) => (props.isShowPoolData ? '24px' : '0px')};\r\n  @media screen and (max-width: 1366px) {\r\n    width: ${(props) => (props.isShowPoolData ? 'calc(60% - 48px)' : '100%')};\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    width: 100%;\r\n    margin-bottom: 24px;\r\n  } ;\r\n`\r\n\r\nconst PoolInfoBox = styled(Box)`\r\n  width: 25%;\r\n\r\n  @media screen and (max-width: 1366px) {\r\n    width: 20%;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    width: calc(50% - 24px);\r\n  }\r\n\r\n  @media screen and (max-width: 576px) {\r\n    width: 100%;\r\n    margin-bottom: 24px;\r\n  } ;\r\n`\r\n\r\nconst TokenInfoBox = styled(Box)`\r\n  width: 25%;\r\n\r\n  @media screen and (max-width: 1366px) {\r\n    width: 20%;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    width: calc(50% - 24px);\r\n  }\r\n\r\n  @media screen and (max-width: 576px) {\r\n    width: 100%;\r\n  } ;\r\n`\r\n\r\nconst StyledHeading = styled(Heading)`\r\n  margin-bottom: 14px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n  }\r\n`\r\n\r\ninterface ParamsType {\r\n  id: string\r\n}\r\n\r\nconst ProjectDetail = () => {\r\n  const { chainId, account } = useWeb3React()\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [isLoadingTierInfo, setIsLoadingTierInfo] = useState(true)\r\n  const [userTierAfterSnapshot, setUserTierAfterSnapshot] = useState(0)\r\n  const [userEstLuaAfterSnapshot, setUserEstLuaAfterSnapshot] = useState(0)\r\n  const { id } = useParams<ParamsType>()\r\n  const dispatch = useAppDispatch()\r\n  const blockNumber = useBlock()\r\n  const currentPoolData = useSelector(selectCurrentPool)\r\n  const userTier = useSelector(selectUserTier)\r\n  const userEstLua = useSelector(selectUserEstLua)\r\n  const isLoadingPool = useSelector(selectLoadingCurrentPool)\r\n  const secondsUntilSnapshot = useSecondsUntilCurrent(get(currentPoolData, 'untilSnapshootAt', null))\r\n  const idoSupportedNetwork = getIdoSupportedNetwork(currentPoolData.index)\r\n  const { isPresent, isWhitelist, status, isExclusive } = currentPoolData\r\n  const isShowPoolData = useMemo(() => {\r\n    if (isPresent && status === 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }, [isPresent, isWhitelist, status, secondsUntilSnapshot])\r\n\r\n  const isShowTierInfor = useMemo(() => {\r\n    if (isWhitelist) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }, [isPresent, isWhitelist, status, secondsUntilSnapshot])\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(\r\n        fetchPool(id, () => {\r\n          setIsLoaded(true)\r\n        }),\r\n      )\r\n    }\r\n  }, [id, dispatch, blockNumber.currentBlock])\r\n  useEffect(() => {\r\n    const fetchTierAfterSnapshotTime = async () => {\r\n      try {\r\n        const { tier, estLua } = await getTierDataAfterSnapshot(account, id)\r\n        setUserTierAfterSnapshot(tier)\r\n        setUserEstLuaAfterSnapshot(estLua)\r\n        setIsLoadingTierInfo(false)\r\n      } catch (error) {\r\n        setUserTierAfterSnapshot(0)\r\n        setUserEstLuaAfterSnapshot(0)\r\n        setIsLoadingTierInfo(false)\r\n        console.log(error, 'fail to fetch tier after snapshot time')\r\n      }\r\n    }\r\n    // Only call this api when current date time > snapshot time\r\n    if (secondsUntilSnapshot !== null && secondsUntilSnapshot <= 0 && account) {\r\n      fetchTierAfterSnapshotTime()\r\n    } else {\r\n      setIsLoadingTierInfo(false)\r\n    }\r\n  }, [secondsUntilSnapshot, account, id])\r\n\r\n  // Clear current pool when component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setDefaultCurrentPool())\r\n    }\r\n  }, [dispatch])\r\n\r\n  const selectedUserTier = useMemo(() => {\r\n    // We will get the userTier if current date time < snapshot time or else we will get userTierAfterSnapshot\r\n    if (secondsUntilSnapshot !== null && secondsUntilSnapshot <= 0) {\r\n      return userTierAfterSnapshot\r\n    }\r\n    return userTier\r\n  }, [secondsUntilSnapshot, userTier, userTierAfterSnapshot])\r\n\r\n  const selectedUserEstLua = useMemo(() => {\r\n    // We will get the userEstLua if current date time < snapshot time or else we will get userTierAfterSnapshot\r\n    if (secondsUntilSnapshot !== null && secondsUntilSnapshot <= 0) {\r\n      return userEstLuaAfterSnapshot\r\n    }\r\n    return userEstLua\r\n  }, [secondsUntilSnapshot, userEstLua, userEstLuaAfterSnapshot])\r\n\r\n  const tierDataOfUser = useDeepMemo(() => {\r\n    const { index = [] } = currentPoolData\r\n    return getIdoDataBasedOnChainIdAndTier(index, chainId, selectedUserTier)\r\n  }, [currentPoolData, chainId, selectedUserTier])\r\n\r\n  const [_, totalUserCommittedFromContract, totalAmountUserSwapped, isLoadingDataFromContract, luaVestingAddress] =\r\n    useDataFromIdoContract(\r\n      tierDataOfUser.addressIdoContract,\r\n      tierDataOfUser.index,\r\n      currentPoolData.index,\r\n      currentPoolData.versionContract,\r\n    )\r\n\r\n  const idoDetailFromContract = useTotalDataFromApi(currentPoolData)\r\n\r\n  const isAvailalbeOnCurrentNetwork = useDeepMemo(() => {\r\n    if (!account || !currentPoolData.index) {\r\n      return false\r\n    }\r\n    const availalbeNetwork = Object.keys(currentPoolData.index)\r\n    return availalbeNetwork.includes(String(chainId))\r\n  }, [currentPoolData.index, chainId])\r\n\r\n  const titleTier = useGetTitleOfTier(Number(selectedUserEstLua || 0), isExclusive)\r\n\r\n  /**\r\n   * currentPoolData: all tier's information\r\n   * tierDataOfUser: The correct tier data for user (based on user's tier)\r\n   * contractData: idos data fetch from contract\r\n   */\r\n  return (\r\n    <Page>\r\n      <Row>\r\n        {/* After show the loading component, never show it second time */}\r\n        {!isLoaded && isLoadingPool ? (\r\n          <PageLoader />\r\n        ) : (\r\n          <>\r\n            {' '}\r\n            {!isAvailalbeOnCurrentNetwork && account && isShowPoolData && (\r\n              <Mesage variant=\"warning\" mb=\"16px\">\r\n                <Text>\r\n                  The IDO is on {idoSupportedNetwork}, please switch to {idoSupportedNetwork} to join\r\n                </Text>\r\n              </Mesage>\r\n            )}\r\n            <StyledFlex mb=\"40px\" flexWrap=\"wrap\">\r\n              <PoolSummary\r\n                currentPoolData={currentPoolData}\r\n                tierDataOfUser={tierDataOfUser}\r\n                isShowPoolData={isShowPoolData}\r\n                isShowTierInfor={isShowTierInfor}\r\n                contractData={idoDetailFromContract}\r\n                isAvailalbeOnCurrentNetwork={isAvailalbeOnCurrentNetwork}\r\n              />\r\n              <Deposit\r\n                titleTier={titleTier}\r\n                isShowPoolData={isShowPoolData}\r\n                isShowTierInfor={isShowTierInfor}\r\n                isLoadingTierInfo={isLoadingTierInfo}\r\n                isLoadingDataFromContract={isLoadingDataFromContract}\r\n                currentPoolData={currentPoolData}\r\n                tierDataOfUser={tierDataOfUser}\r\n                totalAmountUserSwapped={totalAmountUserSwapped}\r\n                userTotalCommitted={totalUserCommittedFromContract}\r\n                contractData={idoDetailFromContract}\r\n                selectedUserTier={selectedUserTier}\r\n                isAvailalbeOnCurrentNetwork={isAvailalbeOnCurrentNetwork}\r\n              />\r\n            </StyledFlex>\r\n            {isShowTierInfor && isShowPoolData && !isExclusive && (\r\n              <>\r\n                <Heading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\" mb=\"14px\">\r\n                  Tier Information\r\n                </Heading>\r\n                <TierDetails\r\n                  currentPoolData={currentPoolData}\r\n                  selectedUserTier={selectedUserTier}\r\n                  secondsUntilSnapshot={secondsUntilSnapshot}\r\n                />\r\n              </>\r\n            )}\r\n            <StyledFlex flexWrap=\"wrap\">\r\n              <ProjectDetailBox isShowPoolData={isShowPoolData}>\r\n                <StyledHeading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\" mb=\"14px\">\r\n                  Project Detail\r\n                </StyledHeading>\r\n                <ProjectInfo currentPoolData={currentPoolData} />\r\n              </ProjectDetailBox>\r\n              {isShowPoolData && (\r\n                <>\r\n                  <PoolInfoBox mr=\"24px\">\r\n                    <StyledHeading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\">\r\n                      Pool info\r\n                    </StyledHeading>\r\n                    <PoolInfo currentPoolData={currentPoolData} />\r\n                  </PoolInfoBox>\r\n                  <TokenInfoBox>\r\n                    <StyledHeading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\">\r\n                      Token info\r\n                    </StyledHeading>\r\n                    <TokenInfo currentPoolData={currentPoolData} />\r\n                  </TokenInfoBox>\r\n                </>\r\n              )}\r\n            </StyledFlex>\r\n            <Heading as=\"h2\" scale=\"lg\" color=\"#D8D8D8\" mb=\"14px\">\r\n              How to LuaStarts\r\n            </Heading>\r\n            <Steps\r\n              selectedUserTier={titleTier}\r\n              isShowTierInfor={isShowTierInfor}\r\n              selectedUserEstLua={isNaN(Number(selectedUserEstLua)) ? 0 : selectedUserEstLua}\r\n            />\r\n          </>\r\n        )}\r\n      </Row>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default ProjectDetail\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Route, useRouteMatch, Switch } from 'react-router-dom'\r\nimport AuthRoute from 'hooks/AuthRoute'\r\nimport TOSAuthRoute from 'hooks/TOSAuthRoute'\r\nimport IdosInfo from './IdosInfo'\r\nimport DevTools from './DevTools'\r\nimport ProjectDetail from './components/ProjectDetail'\r\n\r\nconst Idos = () => {\r\n  const { t } = useTranslation()\r\n  const { path } = useRouteMatch()\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}/project/:id`}>\r\n        <TOSAuthRoute component={ProjectDetail} />\r\n      </Route>\r\n      <Route path={`${path}/history/project/:id`}>\r\n        <TOSAuthRoute component={ProjectDetail} />\r\n      </Route>\r\n      <Route path={`${path}/dev-tools`}>\r\n        <AuthRoute component={DevTools} />\r\n      </Route>\r\n      <Route path={`${path}`}>\r\n        <TOSAuthRoute component={IdosInfo} />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Idos\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account, chainId?) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  const res = await lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send(gasLimit)\r\n  return res\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, chainId?) => {\r\n  // if (pid === 0) {\r\n  //   return masterChefContract.methods\r\n  //     .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n  //     .send({ from: account, gas: DEFAULT_GAS })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const depositIdo = async (luaIdoContract, account, amount, idoIndex, isNativeToken, proofS) => {\r\n  // If pay token is native token, we will send amount or else we wont'\r\n  return luaIdoContract.methods\r\n    .commit(idoIndex, amount, proofS)\r\n    .send({\r\n      from: account,\r\n      ...(isNativeToken && { value: amount }),\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claimRewardIdo = async (luaIdoContract, account, amount, idoIndex, proofS) => {\r\n  // const commitedAmount = await luaIdoContract.methods.userCommitedAmount(account, 0).call()\r\n  return luaIdoContract.methods\r\n    .userClaim(idoIndex, account, amount, proofS)\r\n    .send({\r\n      from: account,\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claimVesting = async (vestingContract, account) => {\r\n  return vestingContract.methods\r\n    .claim()\r\n    .send({\r\n      from: account,\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const approveIdo = async (tokenContract, luaIdoAddress, account, chainId) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  const res = await tokenContract.methods.approve(luaIdoAddress, ethers.constants.MaxUint256).send(gasLimit)\r\n  return res\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account, chainId?) => {\r\n  // if (pid === 0) {\r\n  //   return masterChefContract.methods\r\n  //     .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n  //     .send({ from: account, gas: DEFAULT_GAS })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account, chainId) => {\r\n  const gasLimit = chainId === 88 ? { from: account, gasLimit: '0x7A120' } : { from: account }\r\n  return masterChefContract.methods\r\n    .claimReward(pid)\r\n    .send(gasLimit)\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account, gas: DEFAULT_GAS })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from 'luastarter-uikits'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button width=\"100%\" onClick={onPresentConnectModal} {...props}>\r\n      {t('Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link, Box } from 'luastarter-uikits'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  min?: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  secondaryTitle?: string\r\n  isLoadingDataFromContract?: boolean\r\n  showWarning?: boolean\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1a1a1a;\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  min,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  isLoadingDataFromContract = false,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  secondaryTitle = 'Balance',\r\n  showWarning = true,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero && showWarning}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{`${secondaryTitle}: ${isLoadingDataFromContract ? '~' : max}`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-between\">\r\n          <Box>\r\n            <StyledInput\r\n              pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n              inputMode=\"decimal\"\r\n              step=\"any\"\r\n              min={min}\r\n              max={max}\r\n              onChange={onChange}\r\n              placeholder=\"0\"\r\n              value={value}\r\n            />\r\n          </Box>\r\n          <Flex alignItems=\"center\">\r\n            <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\" disabled={isLoadingDataFromContract}>\r\n              {t('Max')}\r\n            </Button>\r\n            <Text>{symbol}</Text>\r\n          </Flex>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && addLiquidityUrl && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabStyle\":\"styles_tabStyle__2DOFm\"};"],"sourceRoot":""}